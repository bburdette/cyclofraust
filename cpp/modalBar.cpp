//----------------------------------------------------------
// name: "Modal Bar"
// author: "Romain Michon (rmichon@ccrma.stanford.edu)"
// copyright: "Romain Michon"
// version: "1.0"
//
// Code generated with Faust 0.9.73 (http://faust.grame.fr)
//----------------------------------------------------------

/* link with : "" */
#include "instrument.h"
#include <math.h>
#include "modalBar.h"
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline float faustpower(float x)          { return powf(x,N); } 
template <int N> inline double faustpower(double x)        { return pow(x,N); }
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x)            { return 1; }
template <> 	 inline int faustpower<1>(int x)            { return x; }
template <> 	 inline int faustpower<2>(int x)            { return x*x; }
#endif
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int 	fSamplingFreq;
		int 	iRec0[2];
	  public:
		int getNumInputs() 	{ return 0; }
		int getNumOutputs() 	{ return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			for (int i=0; i<2; i++) iRec0[i] = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				iRec0[0] = (1 + iRec0[1]);
				output[i] = sinf((9.587379924285257e-05f * float((iRec0[0] - 1))));
				// post processing
				iRec0[1] = iRec0[0];
			}
		}
	};


	class SIG1 {
	  private:
		int 	fSamplingFreq;
		int 	iRec5[2];
	  public:
		int getNumInputs() 	{ return 0; }
		int getNumOutputs() 	{ return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			for (int i=0; i<2; i++) iRec5[i] = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				iRec5[0] = (1 + iRec5[1]);
				output[i] = readMarmstk1(int(((iRec5[0] - 1) % 246)));
				// post processing
				iRec5[1] = iRec5[0];
			}
		}
	};


	static float 	ftbl0[65536];
	FAUSTFLOAT 	fslider0;
	int 	iConst0;
	float 	fConst1;
	float 	fConst2;
	float 	fRec1[2];
	FAUSTFLOAT 	fslider1;
	FAUSTFLOAT 	fentry0;
	float 	fRec3[2];
	static float 	ftbl1[246];
	FAUSTFLOAT 	fslider2;
	float 	fRec6[2];
	FAUSTFLOAT 	fbutton0;
	float 	fRec7[2];
	float 	fRec4[2];
	FAUSTFLOAT 	fentry1;
	float 	fRec8[2];
	FAUSTFLOAT 	fentry2;
	FAUSTFLOAT 	fentry3;
	float 	fConst3;
	float 	fRec2[3];
	float 	fRec10[2];
	float 	fRec11[2];
	float 	fRec9[3];
	float 	fRec13[2];
	float 	fRec14[2];
	float 	fRec12[3];
	float 	fRec16[2];
	float 	fRec17[2];
	float 	fRec15[3];
	FAUSTFLOAT 	fslider3;
	float 	fRec18[2];
	FAUSTFLOAT 	fentry4;
	float 	fVec0[2];
	float 	fRec24[2];
	float 	fRec23[2];
	float 	fRec22[2];
	float 	fRec21[2];
	float 	fRec20[2];
	float 	fRec19[2];
	FAUSTFLOAT 	fslider4;
	float 	fRec26[2];
	float 	fRec25[2];
	float 	fRec32[2];
	float 	fRec31[2];
	float 	fRec30[2];
	float 	fRec29[2];
	float 	fRec28[2];
	float 	fRec27[2];
	int 	IOTA;
	float 	fVec1[4096];
	FAUSTFLOAT 	fslider5;
	float 	fRec33[2];
	FAUSTFLOAT 	fslider6;
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fRec45[2];
	FAUSTFLOAT 	fslider7;
	float 	fConst8;
	float 	fConst9;
	float 	fConst10;
	float 	fConst11;
	float 	fConst12;
	float 	fRec44[2];
	float 	fVec2[8192];
	float 	fConst13;
	int 	iConst14;
	float 	fVec3[4096];
	int 	iConst15;
	float 	fVec4[2048];
	int 	iConst16;
	float 	fRec42[2];
	float 	fRec49[2];
	float 	fConst17;
	float 	fConst18;
	float 	fConst19;
	float 	fConst20;
	float 	fRec48[2];
	float 	fVec5[8192];
	float 	fConst21;
	int 	iConst22;
	float 	fVec6[1024];
	int 	iConst23;
	float 	fRec46[2];
	float 	fRec53[2];
	float 	fConst24;
	float 	fConst25;
	float 	fConst26;
	float 	fConst27;
	float 	fRec52[2];
	float 	fVec7[8192];
	float 	fConst28;
	int 	iConst29;
	float 	fVec8[2048];
	int 	iConst30;
	float 	fRec50[2];
	float 	fRec57[2];
	float 	fConst31;
	float 	fConst32;
	float 	fConst33;
	float 	fConst34;
	float 	fRec56[2];
	float 	fVec9[8192];
	float 	fConst35;
	int 	iConst36;
	float 	fVec10[1024];
	int 	iConst37;
	float 	fRec54[2];
	float 	fRec61[2];
	float 	fConst38;
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fRec60[2];
	float 	fVec11[16384];
	float 	fConst42;
	int 	iConst43;
	FAUSTFLOAT 	fslider8;
	float 	fConst44;
	float 	fVec12[4096];
	float 	fVec13[2048];
	int 	iConst45;
	float 	fRec58[2];
	float 	fRec65[2];
	float 	fConst46;
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fRec64[2];
	float 	fVec14[8192];
	float 	fConst50;
	int 	iConst51;
	float 	fVec15[2048];
	int 	iConst52;
	float 	fRec62[2];
	float 	fRec69[2];
	float 	fConst53;
	float 	fConst54;
	float 	fConst55;
	float 	fConst56;
	float 	fRec68[2];
	float 	fVec16[16384];
	float 	fConst57;
	int 	iConst58;
	float 	fVec17[2048];
	int 	iConst59;
	float 	fRec66[2];
	float 	fRec73[2];
	float 	fConst60;
	float 	fConst61;
	float 	fConst62;
	float 	fConst63;
	float 	fRec72[2];
	float 	fVec18[16384];
	float 	fConst64;
	int 	iConst65;
	float 	fVec19[1024];
	int 	iConst66;
	float 	fRec70[2];
	float 	fRec34[3];
	float 	fRec35[3];
	float 	fRec36[3];
	float 	fRec37[3];
	float 	fRec38[3];
	float 	fRec39[3];
	float 	fRec40[3];
	float 	fRec41[3];
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "Modal Bar");
		m->declare("description", "Nonlinear Modal percussive instruments");
		m->declare("author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("copyright", "Romain Michon");
		m->declare("version", "1.0");
		m->declare("licence", "STK-4.3");
		m->declare("math.lib/name", "Math Library");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("instrument.lib/name", "Faust-STK Tools Library");
		m->declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("instrument.lib/copyright", "Romain Michon");
		m->declare("instrument.lib/version", "1.0");
		m->declare("instrument.lib/licence", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/version", "1.29");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/copyright", "Julius O. Smith III");
		m->declare("effect.lib/version", "1.33");
		m->declare("effect.lib/license", "STK-4.3");
		m->declare("effect.lib/exciter_name", "Harmonic Exciter");
		m->declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
		m->declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
		m->declare("effect.lib/exciter_version", "1.0");
		m->declare("effect.lib/exciter_license", "MIT License (MIT)");
	}

	virtual int getNumInputs() 	{ return 0; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
		SIG0 sig0;
		sig0.init(samplingFreq);
		sig0.fill(65536,ftbl0);
		SIG1 sig1;
		sig1.init(samplingFreq);
		sig1.fill(246,ftbl1);
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fslider0 = 6.0f;
		iConst0 = min(192000, max(1, fSamplingFreq));
		fConst1 = float(iConst0);
		fConst2 = (1.0f / fConst1);
		for (int i=0; i<2; i++) fRec1[i] = 0;
		fslider1 = 0.1f;
		fentry0 = 1.0f;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		fslider2 = 0.25f;
		for (int i=0; i<2; i++) fRec6[i] = 0;
		fbutton0 = 0.0;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		for (int i=0; i<2; i++) fRec4[i] = 0;
		fentry1 = 0.8f;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		fentry2 = 1.0f;
		fentry3 = 4.4e+02f;
		fConst3 = (6.283185307179586f / float(iConst0));
		for (int i=0; i<3; i++) fRec2[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		for (int i=0; i<3; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		for (int i=0; i<3; i++) fRec12[i] = 0;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		for (int i=0; i<2; i++) fRec17[i] = 0;
		for (int i=0; i<3; i++) fRec15[i] = 0;
		fslider3 = 0.0f;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		fentry4 = 0.0f;
		for (int i=0; i<2; i++) fVec0[i] = 0;
		for (int i=0; i<2; i++) fRec24[i] = 0;
		for (int i=0; i<2; i++) fRec23[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		fslider4 = 2.2e+02f;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fRec25[i] = 0;
		for (int i=0; i<2; i++) fRec32[i] = 0;
		for (int i=0; i<2; i++) fRec31[i] = 0;
		for (int i=0; i<2; i++) fRec30[i] = 0;
		for (int i=0; i<2; i++) fRec29[i] = 0;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		for (int i=0; i<2; i++) fRec27[i] = 0;
		IOTA = 0;
		for (int i=0; i<4096; i++) fVec1[i] = 0;
		fslider5 = 0.137f;
		for (int i=0; i<2; i++) fRec33[i] = 0;
		fslider6 = 0.6f;
		fConst4 = (1.0f / tanf((628.3185307179587f / float(iConst0))));
		fConst5 = (1 + fConst4);
		fConst6 = (1.0f / fConst5);
		fConst7 = (0 - ((1 - fConst4) / fConst5));
		for (int i=0; i<2; i++) fRec45[i] = 0;
		fslider7 = 0.72f;
		fConst8 = floorf((0.5f + (0.174713f * iConst0)));
		fConst9 = ((0 - (6.907755278982138f * fConst8)) / float(iConst0));
		fConst10 = (0.5f * fConst9);
		fConst11 = (0.3333333333333333f * fConst9);
		fConst12 = cosf((37699.11184307752f / fConst1));
		for (int i=0; i<2; i++) fRec44[i] = 0;
		for (int i=0; i<8192; i++) fVec2[i] = 0;
		fConst13 = floorf((0.5f + (0.022904f * iConst0)));
		iConst14 = int((int((fConst8 - fConst13)) & 8191));
		for (int i=0; i<4096; i++) fVec3[i] = 0;
		iConst15 = int((int((0.02f * iConst0)) & 8191));
		for (int i=0; i<2048; i++) fVec4[i] = 0;
		iConst16 = int((int((fConst13 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec42[i] = 0;
		for (int i=0; i<2; i++) fRec49[i] = 0;
		fConst17 = floorf((0.5f + (0.153129f * iConst0)));
		fConst18 = ((0 - (6.907755278982138f * fConst17)) / float(iConst0));
		fConst19 = (0.5f * fConst18);
		fConst20 = (0.3333333333333333f * fConst18);
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<8192; i++) fVec5[i] = 0;
		fConst21 = floorf((0.5f + (0.020346f * iConst0)));
		iConst22 = int((int((fConst17 - fConst21)) & 8191));
		for (int i=0; i<1024; i++) fVec6[i] = 0;
		iConst23 = int((int((fConst21 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec46[i] = 0;
		for (int i=0; i<2; i++) fRec53[i] = 0;
		fConst24 = floorf((0.5f + (0.127837f * iConst0)));
		fConst25 = ((0 - (6.907755278982138f * fConst24)) / float(iConst0));
		fConst26 = (0.5f * fConst25);
		fConst27 = (0.3333333333333333f * fConst25);
		for (int i=0; i<2; i++) fRec52[i] = 0;
		for (int i=0; i<8192; i++) fVec7[i] = 0;
		fConst28 = floorf((0.5f + (0.031604f * iConst0)));
		iConst29 = int((int((fConst24 - fConst28)) & 8191));
		for (int i=0; i<2048; i++) fVec8[i] = 0;
		iConst30 = int((int((fConst28 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec50[i] = 0;
		for (int i=0; i<2; i++) fRec57[i] = 0;
		fConst31 = floorf((0.5f + (0.125f * iConst0)));
		fConst32 = ((0 - (6.907755278982138f * fConst31)) / float(iConst0));
		fConst33 = (0.5f * fConst32);
		fConst34 = (0.3333333333333333f * fConst32);
		for (int i=0; i<2; i++) fRec56[i] = 0;
		for (int i=0; i<8192; i++) fVec9[i] = 0;
		fConst35 = floorf((0.5f + (0.013458f * iConst0)));
		iConst36 = int((int((fConst31 - fConst35)) & 8191));
		for (int i=0; i<1024; i++) fVec10[i] = 0;
		iConst37 = int((int((fConst35 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec54[i] = 0;
		for (int i=0; i<2; i++) fRec61[i] = 0;
		fConst38 = floorf((0.5f + (0.210389f * iConst0)));
		fConst39 = ((0 - (6.907755278982138f * fConst38)) / float(iConst0));
		fConst40 = (0.5f * fConst39);
		fConst41 = (0.3333333333333333f * fConst39);
		for (int i=0; i<2; i++) fRec60[i] = 0;
		for (int i=0; i<16384; i++) fVec11[i] = 0;
		fConst42 = floorf((0.5f + (0.024421f * iConst0)));
		iConst43 = int((int((fConst38 - fConst42)) & 16383));
		fslider8 = 0.5f;
		fConst44 = (0.5f * iConst0);
		for (int i=0; i<4096; i++) fVec12[i] = 0;
		for (int i=0; i<2048; i++) fVec13[i] = 0;
		iConst45 = int((int((fConst42 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec58[i] = 0;
		for (int i=0; i<2; i++) fRec65[i] = 0;
		fConst46 = floorf((0.5f + (0.192303f * iConst0)));
		fConst47 = ((0 - (6.907755278982138f * fConst46)) / float(iConst0));
		fConst48 = (0.5f * fConst47);
		fConst49 = (0.3333333333333333f * fConst47);
		for (int i=0; i<2; i++) fRec64[i] = 0;
		for (int i=0; i<8192; i++) fVec14[i] = 0;
		fConst50 = floorf((0.5f + (0.029291f * iConst0)));
		iConst51 = int((int((fConst46 - fConst50)) & 8191));
		for (int i=0; i<2048; i++) fVec15[i] = 0;
		iConst52 = int((int((fConst50 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec62[i] = 0;
		for (int i=0; i<2; i++) fRec69[i] = 0;
		fConst53 = floorf((0.5f + (0.256891f * iConst0)));
		fConst54 = ((0 - (6.907755278982138f * fConst53)) / float(iConst0));
		fConst55 = (0.5f * fConst54);
		fConst56 = (0.3333333333333333f * fConst54);
		for (int i=0; i<2; i++) fRec68[i] = 0;
		for (int i=0; i<16384; i++) fVec16[i] = 0;
		fConst57 = floorf((0.5f + (0.027333f * iConst0)));
		iConst58 = int((int((fConst53 - fConst57)) & 16383));
		for (int i=0; i<2048; i++) fVec17[i] = 0;
		iConst59 = int((int((fConst57 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec66[i] = 0;
		for (int i=0; i<2; i++) fRec73[i] = 0;
		fConst60 = floorf((0.5f + (0.219991f * iConst0)));
		fConst61 = ((0 - (6.907755278982138f * fConst60)) / float(iConst0));
		fConst62 = (0.5f * fConst61);
		fConst63 = (0.3333333333333333f * fConst61);
		for (int i=0; i<2; i++) fRec72[i] = 0;
		for (int i=0; i<16384; i++) fVec18[i] = 0;
		fConst64 = floorf((0.5f + (0.019123f * iConst0)));
		iConst65 = int((int((fConst60 - fConst64)) & 16383));
		for (int i=0; i<1024; i++) fVec19[i] = 0;
		iConst66 = int((int((fConst64 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec70[i] = 0;
		for (int i=0; i<3; i++) fRec34[i] = 0;
		for (int i=0; i<3; i++) fRec35[i] = 0;
		for (int i=0; i<3; i++) fRec36[i] = 0;
		for (int i=0; i<3; i++) fRec37[i] = 0;
		for (int i=0; i<3; i++) fRec38[i] = 0;
		for (int i=0; i<3; i++) fRec39[i] = 0;
		for (int i=0; i<3; i++) fRec40[i] = 0;
		for (int i=0; i<3; i++) fRec41[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->openHorizontalBox("Basic_Parameters");
		interface->declare(&fentry3, "1", "");
		interface->declare(&fentry3, "tooltip", "Tone frequency");
		interface->declare(&fentry3, "unit", "Hz");
		interface->addNumEntry("freq", &fentry3, 4.4e+02f, 2e+01f, 2e+04f, 1.0f);
		interface->declare(&fentry1, "1", "");
		interface->declare(&fentry1, "tooltip", "Gain (value between 0 and 1)");
		interface->addNumEntry("gain", &fentry1, 0.8f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fbutton0, "1", "");
		interface->declare(&fbutton0, "tooltip", "noteOn = 1, noteOff = 0");
		interface->addButton("gate", &fbutton0);
		interface->closeBox();
		interface->openHorizontalBox("Envelopes_and_Vibrato");
		interface->openVerticalBox("Vibrato_Parameters");
		interface->declare(&fslider0, "4", "");
		interface->declare(&fslider0, "unit", "Hz");
		interface->addHorizontalSlider("Vibrato_Freq", &fslider0, 6.0f, 1.0f, 15.0f, 0.1f);
		interface->declare(&fslider1, "4", "");
		interface->declare(&fslider1, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Vibrato_Gain", &fslider1, 0.1f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openHorizontalBox("Physical_and_Nonlinearity");
		interface->openVerticalBox("Nonlinear_Filter_Parameters");
		interface->declare(&fslider4, "3", "");
		interface->declare(&fslider4, "tooltip", "Frequency of the sine wave for the modulation of theta (works if Modulation Type=3)");
		interface->declare(&fslider4, "unit", "Hz");
		interface->addHorizontalSlider("Modulation_Frequency", &fslider4, 2.2e+02f, 2e+01f, 1e+03f, 0.1f);
		interface->declare(&fentry4, "3", "");
		interface->declare(&fentry4, "tooltip", "0=theta is modulated by the incoming signal; 1=theta is modulated by the averaged incoming signal; 2=theta is modulated by the squared incoming signal; 3=theta is modulated by a sine wave of frequency freqMod; 4=theta is modulated by a sine wave of frequency freq;");
		interface->addNumEntry("Modulation_Type", &fentry4, 0.0f, 0.0f, 4.0f, 1.0f);
		interface->declare(&fslider3, "3", "");
		interface->declare(&fslider3, "tooltip", "Nonlinearity factor (value between 0 and 1)");
		interface->addHorizontalSlider("Nonlinearity", &fslider3, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Physical_Parameters");
		interface->declare(&fentry0, "2", "");
		interface->declare(&fentry0, "tooltip", "0->Marimba, 1->Vibraphone, 2->Agogo, 3->Wood1, 4->Reso, 5->Wood2, 6->Beats, 7->2Fix; 8->Clump");
		interface->addNumEntry("Preset", &fentry0, 1.0f, 0.0f, 8.0f, 1.0f);
		interface->declare(&fentry2, "2", "");
		interface->declare(&fentry2, "tooltip", "A value between 0 and 1");
		interface->addNumEntry("Resonance", &fentry2, 1.0f, 0.0f, 1.0f, 1.0f);
		interface->declare(&fslider2, "2", "");
		interface->declare(&fslider2, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Stick_Hardness", &fslider2, 0.25f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openVerticalBox("Reverb");
		interface->addHorizontalSlider("reverbGain", &fslider5, 0.137f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("roomSize", &fslider7, 0.72f, 0.01f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Spat");
		interface->addHorizontalSlider("pan angle", &fslider6, 0.6f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("spatial width", &fslider8, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = (fConst2 * float(fslider0));
		float 	fSlow1 = float(fentry0);
		float 	fSlow2 = ((fSlow1 == 1) * float(fslider1));
		float 	fSlow3 = (0.0010000000000000009f * loadPreset(fSlow1, 2, 1));
		float 	fSlow4 = powf(4,float(fslider2));
		float 	fSlow5 = (0.25f * fSlow4);
		float 	fSlow6 = float(fbutton0);
		float 	fSlow7 = (246.0f * fSlow6);
		float 	fSlow8 = (61.5f * fSlow4);
		float 	fSlow9 = (0.09999999999999998f * fSlow6);
		float 	fSlow10 = float(fentry1);
		float 	fSlow11 = (1 - (0.03f * (fSlow10 * ((fSlow6 < 1) & (float(fentry2) != 1)))));
		float 	fSlow12 = faustpower<2>(fSlow11);
		float 	fSlow13 = float(fentry3);
		float 	fSlow14 = (2 * fSlow11);
		float 	fSlow15 = (0.0010000000000000009f * loadPreset(fSlow1, 2, 0));
		float 	fSlow16 = (0.0010000000000000009f * loadPreset(fSlow1, 2, 2));
		float 	fSlow17 = (0.0010000000000000009f * loadPreset(fSlow1, 2, 3));
		float 	fSlow18 = loadPreset(fSlow1, 3, 2);
		float 	fSlow19 = (0.0010000000000000009f * float(fslider3));
		float 	fSlow20 = float(fentry4);
		float 	fSlow21 = (3.141592653589793f * (fSlow20 == 2));
		float 	fSlow22 = (1.5707963267948966f * (fSlow20 == 1));
		float 	fSlow23 = (3.141592653589793f * (fSlow20 == 0));
		int 	iSlow24 = (fSlow20 < 3);
		float 	fSlow25 = (0.0010000000000000009f * float(fslider4));
		int 	iSlow26 = (fSlow20 != 4);
		float 	fSlow27 = (fSlow13 * (fSlow20 == 4));
		int 	iSlow28 = (fSlow20 >= 3);
		float 	fSlow29 = (0.0010000000000000009f * float(fslider5));
		float 	fSlow30 = float(fslider6);
		float 	fSlow31 = (0.6f * (1.0f - fSlow30));
		float 	fSlow32 = float(fslider7);
		float 	fSlow33 = expf((fConst10 / fSlow32));
		float 	fSlow34 = ((expf((fConst11 / fSlow32)) / fSlow33) - 1);
		float 	fSlow35 = faustpower<2>(fSlow33);
		float 	fSlow36 = (1.0f - fSlow35);
		float 	fSlow37 = (1.0f - (fConst12 * fSlow35));
		float 	fSlow38 = (fSlow37 / fSlow36);
		float 	fSlow39 = sqrtf(max((float)0, ((faustpower<2>(fSlow37) / faustpower<2>(fSlow36)) - 1.0f)));
		float 	fSlow40 = (fSlow33 * ((1.0f + fSlow39) - fSlow38));
		float 	fSlow41 = (fSlow38 - fSlow39);
		float 	fSlow42 = expf((fConst19 / fSlow32));
		float 	fSlow43 = ((expf((fConst20 / fSlow32)) / fSlow42) - 1);
		float 	fSlow44 = faustpower<2>(fSlow42);
		float 	fSlow45 = (1.0f - fSlow44);
		float 	fSlow46 = (1.0f - (fConst12 * fSlow44));
		float 	fSlow47 = (fSlow46 / fSlow45);
		float 	fSlow48 = sqrtf(max((float)0, ((faustpower<2>(fSlow46) / faustpower<2>(fSlow45)) - 1.0f)));
		float 	fSlow49 = (fSlow42 * ((1.0f + fSlow48) - fSlow47));
		float 	fSlow50 = (fSlow47 - fSlow48);
		float 	fSlow51 = expf((fConst26 / fSlow32));
		float 	fSlow52 = ((expf((fConst27 / fSlow32)) / fSlow51) - 1);
		float 	fSlow53 = faustpower<2>(fSlow51);
		float 	fSlow54 = (1.0f - fSlow53);
		float 	fSlow55 = (1.0f - (fConst12 * fSlow53));
		float 	fSlow56 = (fSlow55 / fSlow54);
		float 	fSlow57 = sqrtf(max((float)0, ((faustpower<2>(fSlow55) / faustpower<2>(fSlow54)) - 1.0f)));
		float 	fSlow58 = (fSlow51 * ((1.0f + fSlow57) - fSlow56));
		float 	fSlow59 = (fSlow56 - fSlow57);
		float 	fSlow60 = expf((fConst33 / fSlow32));
		float 	fSlow61 = ((expf((fConst34 / fSlow32)) / fSlow60) - 1);
		float 	fSlow62 = faustpower<2>(fSlow60);
		float 	fSlow63 = (1.0f - fSlow62);
		float 	fSlow64 = (1.0f - (fConst12 * fSlow62));
		float 	fSlow65 = (fSlow64 / fSlow63);
		float 	fSlow66 = sqrtf(max((float)0, ((faustpower<2>(fSlow64) / faustpower<2>(fSlow63)) - 1.0f)));
		float 	fSlow67 = (fSlow60 * ((1.0f + fSlow66) - fSlow65));
		float 	fSlow68 = (fSlow65 - fSlow66);
		float 	fSlow69 = expf((fConst40 / fSlow32));
		float 	fSlow70 = ((expf((fConst41 / fSlow32)) / fSlow69) - 1);
		float 	fSlow71 = faustpower<2>(fSlow69);
		float 	fSlow72 = (1.0f - fSlow71);
		float 	fSlow73 = (1.0f - (fConst12 * fSlow71));
		float 	fSlow74 = (fSlow73 / fSlow72);
		float 	fSlow75 = sqrtf(max((float)0, ((faustpower<2>(fSlow73) / faustpower<2>(fSlow72)) - 1.0f)));
		float 	fSlow76 = (fSlow69 * ((1.0f + fSlow75) - fSlow74));
		float 	fSlow77 = (fSlow74 - fSlow75);
		int 	iSlow78 = int((int((fConst44 * (float(fslider8) / fSlow13))) & 4095));
		float 	fSlow79 = (0.6f * fSlow30);
		float 	fSlow80 = expf((fConst48 / fSlow32));
		float 	fSlow81 = ((expf((fConst49 / fSlow32)) / fSlow80) - 1);
		float 	fSlow82 = faustpower<2>(fSlow80);
		float 	fSlow83 = (1.0f - fSlow82);
		float 	fSlow84 = (1.0f - (fConst12 * fSlow82));
		float 	fSlow85 = (fSlow84 / fSlow83);
		float 	fSlow86 = sqrtf(max((float)0, ((faustpower<2>(fSlow84) / faustpower<2>(fSlow83)) - 1.0f)));
		float 	fSlow87 = (fSlow80 * ((1.0f + fSlow86) - fSlow85));
		float 	fSlow88 = (fSlow85 - fSlow86);
		float 	fSlow89 = expf((fConst55 / fSlow32));
		float 	fSlow90 = ((expf((fConst56 / fSlow32)) / fSlow89) - 1);
		float 	fSlow91 = faustpower<2>(fSlow89);
		float 	fSlow92 = (1.0f - fSlow91);
		float 	fSlow93 = (1.0f - (fConst12 * fSlow91));
		float 	fSlow94 = (fSlow93 / fSlow92);
		float 	fSlow95 = sqrtf(max((float)0, ((faustpower<2>(fSlow93) / faustpower<2>(fSlow92)) - 1.0f)));
		float 	fSlow96 = (fSlow89 * ((1.0f + fSlow95) - fSlow94));
		float 	fSlow97 = (fSlow94 - fSlow95);
		float 	fSlow98 = expf((fConst62 / fSlow32));
		float 	fSlow99 = ((expf((fConst63 / fSlow32)) / fSlow98) - 1);
		float 	fSlow100 = faustpower<2>(fSlow98);
		float 	fSlow101 = (1.0f - fSlow100);
		float 	fSlow102 = (1.0f - (fConst12 * fSlow100));
		float 	fSlow103 = (fSlow102 / fSlow101);
		float 	fSlow104 = sqrtf(max((float)0, ((faustpower<2>(fSlow102) / faustpower<2>(fSlow101)) - 1.0f)));
		float 	fSlow105 = (fSlow98 * ((1.0f + fSlow104) - fSlow103));
		float 	fSlow106 = (fSlow103 - fSlow104);
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			float fTemp0 = (fRec1[1] + fSlow0);
			fRec1[0] = (fTemp0 - floorf(fTemp0));
			float fTemp1 = (1 + (fSlow2 * ftbl0[int((65536.0f * fRec1[0]))]));
			fRec3[0] = ((0.999f * fRec3[1]) + fSlow3);
			float fTemp2 = (fSlow5 + fRec6[1]);
			fRec6[0] = (fTemp2 - floorf(fTemp2));
			fRec7[0] = (1 + (fSlow6 * fRec7[1]));
			fRec4[0] = ((fSlow9 * (((fRec7[0] - 1) < fSlow8) * ftbl1[int((fSlow7 * fRec6[0]))])) + (0.9f * fRec4[1]));
			fRec8[0] = (0.0010000000000000009f + (0.999f * fRec8[1]));
			float fTemp3 = loadPreset(fSlow1, 1, fRec8[0]);
			float fTemp4 = loadPreset(fSlow1, 0, fRec8[0]);
			int iTemp5 = (fTemp4 < 0);
			fRec2[0] = (0 - (((((0 - (fSlow14 * fTemp3)) * cosf((fConst3 * ((iTemp5 * (0 - fTemp4)) + (fSlow13 * (fTemp4 * (0 - (iTemp5 - 1)))))))) * fRec2[1]) + (fSlow12 * (faustpower<2>(fTemp3) * fRec2[2]))) - (fSlow10 * (fRec4[0] * fRec3[0]))));
			fRec10[0] = ((0.999f * fRec10[1]) + fSlow15);
			fRec11[0] = (0.999f * fRec11[1]);
			float fTemp6 = loadPreset(fSlow1, 1, fRec11[0]);
			float fTemp7 = loadPreset(fSlow1, 0, fRec11[0]);
			int iTemp8 = (fTemp7 < 0);
			fRec9[0] = (0 - (((((0 - (fSlow14 * fTemp6)) * cosf((fConst3 * ((iTemp8 * (0 - fTemp7)) + (fSlow13 * (fTemp7 * (0 - (iTemp8 - 1)))))))) * fRec9[1]) + (fSlow12 * (faustpower<2>(fTemp6) * fRec9[2]))) - (fSlow10 * (fRec4[0] * fRec10[0]))));
			fRec13[0] = ((0.999f * fRec13[1]) + fSlow16);
			fRec14[0] = ((0.999f * fRec14[1]) + 0.0020000000000000018f);
			float fTemp9 = loadPreset(fSlow1, 1, fRec14[0]);
			float fTemp10 = loadPreset(fSlow1, 0, fRec14[0]);
			int iTemp11 = (fTemp10 < 0);
			fRec12[0] = (0 - (((((0 - (fSlow14 * fTemp9)) * cosf((fConst3 * ((iTemp11 * (0 - fTemp10)) + (fSlow13 * (fTemp10 * (0 - (iTemp11 - 1)))))))) * fRec12[1]) + (fSlow12 * (faustpower<2>(fTemp9) * fRec12[2]))) - (fSlow10 * (fRec4[0] * fRec13[0]))));
			fRec16[0] = ((0.999f * fRec16[1]) + fSlow17);
			fRec17[0] = ((0.999f * fRec17[1]) + 0.0030000000000000027f);
			float fTemp12 = loadPreset(fSlow1, 1, fRec17[0]);
			float fTemp13 = loadPreset(fSlow1, 0, fRec17[0]);
			int iTemp14 = (fTemp13 < 0);
			fRec15[0] = (0 - (((((0 - (fSlow14 * fTemp12)) * cosf((fConst3 * ((iTemp14 * (0 - fTemp13)) + (fSlow13 * (fTemp13 * (0 - (iTemp14 - 1)))))))) * fRec15[1]) + (fSlow12 * (faustpower<2>(fTemp12) * fRec15[2]))) - (fSlow10 * (fRec4[0] * fRec16[0]))));
			float fTemp15 = (fRec15[0] + (fRec12[0] + (fRec9[0] + fRec2[0])));
			float fTemp16 = (fTemp15 + (fSlow18 * ((fSlow10 * fRec4[0]) - fTemp15)));
			fRec18[0] = (fSlow19 + (0.999f * fRec18[1]));
			float fTemp17 = (fTemp16 * fTemp1);
			fVec0[0] = fTemp17;
			float fTemp18 = (fRec18[0] * (((fSlow23 * fVec0[0]) + (fSlow22 * (fVec0[0] + fVec0[1]))) + (fSlow21 * (faustpower<2>(fTemp16) * faustpower<2>(fTemp1)))));
			float fTemp19 = cosf(fTemp18);
			float fTemp20 = sinf(fTemp18);
			float fTemp21 = (0 - fTemp20);
			float fTemp22 = ((fRec19[1] * fTemp21) + (fVec0[0] * fTemp19));
			float fTemp23 = ((fTemp21 * fRec20[1]) + (fTemp19 * fTemp22));
			float fTemp24 = ((fTemp21 * fRec21[1]) + (fTemp19 * fTemp23));
			float fTemp25 = ((fTemp21 * fRec22[1]) + (fTemp19 * fTemp24));
			float fTemp26 = ((fTemp21 * fRec23[1]) + (fTemp19 * fTemp25));
			fRec24[0] = ((fTemp21 * fRec24[1]) + (fTemp19 * fTemp26));
			fRec23[0] = ((fTemp20 * fTemp26) + (fTemp19 * fRec24[1]));
			fRec22[0] = ((fTemp20 * fTemp25) + (fTemp19 * fRec23[1]));
			fRec21[0] = ((fTemp20 * fTemp24) + (fTemp19 * fRec22[1]));
			fRec20[0] = ((fTemp20 * fTemp23) + (fTemp19 * fRec21[1]));
			fRec19[0] = ((fTemp20 * fTemp22) + (fTemp19 * fRec20[1]));
			fRec26[0] = (fSlow25 + (0.999f * fRec26[1]));
			float fTemp27 = (fRec25[1] + (fConst2 * (fSlow27 + (iSlow26 * fRec26[0]))));
			fRec25[0] = (fTemp27 - floorf(fTemp27));
			float fTemp28 = (3.141592653589793f * (fRec18[0] * ftbl0[int((65536.0f * fRec25[0]))]));
			float fTemp29 = cosf(fTemp28);
			float fTemp30 = sinf(fTemp28);
			float fTemp31 = (0 - fTemp30);
			float fTemp32 = ((fRec27[1] * fTemp31) + (fVec0[0] * fTemp29));
			float fTemp33 = ((fTemp31 * fRec28[1]) + (fTemp29 * fTemp32));
			float fTemp34 = ((fTemp31 * fRec29[1]) + (fTemp29 * fTemp33));
			float fTemp35 = ((fTemp31 * fRec30[1]) + (fTemp29 * fTemp34));
			float fTemp36 = ((fTemp31 * fRec31[1]) + (fTemp29 * fTemp35));
			fRec32[0] = ((fTemp31 * fRec32[1]) + (fTemp29 * fTemp36));
			fRec31[0] = ((fTemp30 * fTemp36) + (fTemp29 * fRec32[1]));
			fRec30[0] = ((fTemp30 * fTemp35) + (fTemp29 * fRec31[1]));
			fRec29[0] = ((fTemp30 * fTemp34) + (fTemp29 * fRec30[1]));
			fRec28[0] = ((fTemp30 * fTemp33) + (fTemp29 * fRec29[1]));
			fRec27[0] = ((fTemp30 * fTemp32) + (fTemp29 * fRec28[1]));
			float fTemp37 = ((iSlow28 * ((fVec0[0] * fTemp30) + (fRec27[1] * fTemp29))) + (iSlow24 * ((fRec18[0] * ((fVec0[0] * fTemp20) + (fRec19[1] * fTemp19))) + (((1 - fRec18[0]) * fTemp16) * fTemp1))));
			fVec1[IOTA&4095] = fTemp37;
			fRec33[0] = ((0.999f * fRec33[1]) + fSlow29);
			float fTemp38 = (1 - fRec33[0]);
			fRec45[0] = ((fConst7 * fRec45[1]) + (fConst6 * (fRec38[1] + fRec38[2])));
			fRec44[0] = ((fSlow41 * fRec44[1]) + (fSlow40 * (fRec38[1] + (fSlow34 * fRec45[0]))));
			fVec2[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec44[0]));
			fVec3[IOTA&4095] = (fSlow31 * (fRec33[0] * fVec1[IOTA&4095]));
			float fTemp39 = (0.3f * fVec3[(IOTA-iConst15)&4095]);
			float fTemp40 = ((fTemp39 + fVec2[(IOTA-iConst14)&8191]) - (0.6f * fRec42[1]));
			fVec4[IOTA&2047] = fTemp40;
			fRec42[0] = fVec4[(IOTA-iConst16)&2047];
			float 	fRec43 = (0.6f * fVec4[IOTA&2047]);
			fRec49[0] = ((fConst7 * fRec49[1]) + (fConst6 * (fRec34[1] + fRec34[2])));
			fRec48[0] = ((fSlow50 * fRec48[1]) + (fSlow49 * (fRec34[1] + (fSlow43 * fRec49[0]))));
			fVec5[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec48[0]));
			float fTemp41 = ((fVec5[(IOTA-iConst22)&8191] + fTemp39) - (0.6f * fRec46[1]));
			fVec6[IOTA&1023] = fTemp41;
			fRec46[0] = fVec6[(IOTA-iConst23)&1023];
			float 	fRec47 = (0.6f * fVec6[IOTA&1023]);
			float fTemp42 = (fRec47 + fRec43);
			fRec53[0] = ((fConst7 * fRec53[1]) + (fConst6 * (fRec36[1] + fRec36[2])));
			fRec52[0] = ((fSlow59 * fRec52[1]) + (fSlow58 * (fRec36[1] + (fSlow52 * fRec53[0]))));
			fVec7[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec52[0]));
			float fTemp43 = (fVec7[(IOTA-iConst29)&8191] - (fTemp39 + (0.6f * fRec50[1])));
			fVec8[IOTA&2047] = fTemp43;
			fRec50[0] = fVec8[(IOTA-iConst30)&2047];
			float 	fRec51 = (0.6f * fVec8[IOTA&2047]);
			fRec57[0] = ((fConst7 * fRec57[1]) + (fConst6 * (fRec40[1] + fRec40[2])));
			fRec56[0] = ((fSlow68 * fRec56[1]) + (fSlow67 * (fRec40[1] + (fSlow61 * fRec57[0]))));
			fVec9[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec56[0]));
			float fTemp44 = (fVec9[(IOTA-iConst36)&8191] - (fTemp39 + (0.6f * fRec54[1])));
			fVec10[IOTA&1023] = fTemp44;
			fRec54[0] = fVec10[(IOTA-iConst37)&1023];
			float 	fRec55 = (0.6f * fVec10[IOTA&1023]);
			float fTemp45 = (fRec55 + (fRec51 + fTemp42));
			fRec61[0] = ((fConst7 * fRec61[1]) + (fConst6 * (fRec35[1] + fRec35[2])));
			fRec60[0] = ((fSlow77 * fRec60[1]) + (fSlow76 * (fRec35[1] + (fSlow70 * fRec61[0]))));
			fVec11[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec60[0]));
			float fTemp46 = fVec1[(IOTA-iSlow78)&4095];
			fVec12[IOTA&4095] = (fSlow79 * (fRec33[0] * fTemp46));
			float fTemp47 = (0.3f * fVec12[(IOTA-iConst15)&4095]);
			float fTemp48 = (fTemp47 + ((0.6f * fRec58[1]) + fVec11[(IOTA-iConst43)&16383]));
			fVec13[IOTA&2047] = fTemp48;
			fRec58[0] = fVec13[(IOTA-iConst45)&2047];
			float 	fRec59 = (0 - (0.6f * fVec13[IOTA&2047]));
			fRec65[0] = ((fConst7 * fRec65[1]) + (fConst6 * (fRec39[1] + fRec39[2])));
			fRec64[0] = ((fSlow88 * fRec64[1]) + (fSlow87 * (fRec39[1] + (fSlow81 * fRec65[0]))));
			fVec14[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec64[0]));
			float fTemp49 = (fVec14[(IOTA-iConst51)&8191] + (fTemp47 + (0.6f * fRec62[1])));
			fVec15[IOTA&2047] = fTemp49;
			fRec62[0] = fVec15[(IOTA-iConst52)&2047];
			float 	fRec63 = (0 - (0.6f * fVec15[IOTA&2047]));
			fRec69[0] = ((fConst7 * fRec69[1]) + (fConst6 * (fRec37[1] + fRec37[2])));
			fRec68[0] = ((fSlow97 * fRec68[1]) + (fSlow96 * (fRec37[1] + (fSlow90 * fRec69[0]))));
			fVec16[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec68[0]));
			float fTemp50 = (((0.6f * fRec66[1]) + fVec16[(IOTA-iConst58)&16383]) - fTemp47);
			fVec17[IOTA&2047] = fTemp50;
			fRec66[0] = fVec17[(IOTA-iConst59)&2047];
			float 	fRec67 = (0 - (0.6f * fVec17[IOTA&2047]));
			fRec73[0] = ((fConst7 * fRec73[1]) + (fConst6 * (fRec41[1] + fRec41[2])));
			fRec72[0] = ((fSlow106 * fRec72[1]) + (fSlow105 * (fRec41[1] + (fSlow99 * fRec73[0]))));
			fVec18[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec72[0]));
			float fTemp51 = (((0.6f * fRec70[1]) + fVec18[(IOTA-iConst65)&16383]) - fTemp47);
			fVec19[IOTA&1023] = fTemp51;
			fRec70[0] = fVec19[(IOTA-iConst66)&1023];
			float 	fRec71 = (0 - (0.6f * fVec19[IOTA&1023]));
			fRec34[0] = (fRec70[1] + (fRec66[1] + (fRec62[1] + (fRec58[1] + (fRec54[1] + (fRec50[1] + (fRec42[1] + (fRec46[1] + (fRec71 + (fRec67 + (fRec63 + (fRec59 + fTemp45))))))))))));
			fRec35[0] = (0 - ((fRec70[1] + (fRec66[1] + (fRec62[1] + (fRec58[1] + (fRec71 + (fRec67 + (fRec59 + fRec63))))))) - (fRec54[1] + (fRec50[1] + (fRec42[1] + (fRec46[1] + fTemp45))))));
			float fTemp52 = (fRec51 + fRec55);
			fRec36[0] = (0 - ((fRec70[1] + (fRec66[1] + (fRec54[1] + (fRec50[1] + (fRec71 + (fRec67 + fTemp52)))))) - (fRec62[1] + (fRec58[1] + (fRec42[1] + (fRec46[1] + (fRec63 + (fRec59 + fTemp42))))))));
			fRec37[0] = (0 - ((fRec62[1] + (fRec58[1] + (fRec54[1] + (fRec50[1] + (fRec63 + (fRec59 + fTemp52)))))) - (fRec70[1] + (fRec66[1] + (fRec42[1] + (fRec46[1] + (fRec71 + (fRec67 + fTemp42))))))));
			float fTemp53 = (fRec47 + fRec51);
			float fTemp54 = (fRec43 + fRec55);
			fRec38[0] = (0 - ((fRec70[1] + (fRec62[1] + (fRec54[1] + (fRec42[1] + (fRec71 + (fRec63 + fTemp54)))))) - (fRec66[1] + (fRec58[1] + (fRec50[1] + (fRec46[1] + (fRec67 + (fRec59 + fTemp53))))))));
			fRec39[0] = (0 - ((fRec66[1] + (fRec58[1] + (fRec54[1] + (fRec42[1] + (fRec67 + (fRec59 + fTemp54)))))) - (fRec70[1] + (fRec62[1] + (fRec50[1] + (fRec46[1] + (fRec71 + (fRec63 + fTemp53))))))));
			float fTemp55 = (fRec47 + fRec55);
			float fTemp56 = (fRec43 + fRec51);
			fRec40[0] = (0 - ((fRec66[1] + (fRec62[1] + (fRec50[1] + (fRec42[1] + (fRec67 + (fRec63 + fTemp56)))))) - (fRec70[1] + (fRec58[1] + (fRec54[1] + (fRec46[1] + (fRec71 + (fRec59 + fTemp55))))))));
			fRec41[0] = (0 - ((fRec70[1] + (fRec58[1] + (fRec50[1] + (fRec42[1] + (fRec71 + (fRec59 + fTemp56)))))) - (fRec66[1] + (fRec62[1] + (fRec54[1] + (fRec46[1] + (fRec67 + (fRec63 + fTemp55))))))));
			output0[i] = (FAUSTFLOAT)((0.37f * (fRec35[0] + fRec36[0])) + (fSlow31 * (fTemp38 * fVec1[IOTA&4095])));
			output1[i] = (FAUSTFLOAT)((0.37f * (fRec35[0] - fRec36[0])) + (fSlow79 * (fTemp38 * fTemp46)));
			// post processing
			fRec41[2] = fRec41[1]; fRec41[1] = fRec41[0];
			fRec40[2] = fRec40[1]; fRec40[1] = fRec40[0];
			fRec39[2] = fRec39[1]; fRec39[1] = fRec39[0];
			fRec38[2] = fRec38[1]; fRec38[1] = fRec38[0];
			fRec37[2] = fRec37[1]; fRec37[1] = fRec37[0];
			fRec36[2] = fRec36[1]; fRec36[1] = fRec36[0];
			fRec35[2] = fRec35[1]; fRec35[1] = fRec35[0];
			fRec34[2] = fRec34[1]; fRec34[1] = fRec34[0];
			fRec70[1] = fRec70[0];
			fRec72[1] = fRec72[0];
			fRec73[1] = fRec73[0];
			fRec66[1] = fRec66[0];
			fRec68[1] = fRec68[0];
			fRec69[1] = fRec69[0];
			fRec62[1] = fRec62[0];
			fRec64[1] = fRec64[0];
			fRec65[1] = fRec65[0];
			fRec58[1] = fRec58[0];
			fRec60[1] = fRec60[0];
			fRec61[1] = fRec61[0];
			fRec54[1] = fRec54[0];
			fRec56[1] = fRec56[0];
			fRec57[1] = fRec57[0];
			fRec50[1] = fRec50[0];
			fRec52[1] = fRec52[0];
			fRec53[1] = fRec53[0];
			fRec46[1] = fRec46[0];
			fRec48[1] = fRec48[0];
			fRec49[1] = fRec49[0];
			fRec42[1] = fRec42[0];
			fRec44[1] = fRec44[0];
			fRec45[1] = fRec45[0];
			fRec33[1] = fRec33[0];
			IOTA = IOTA+1;
			fRec27[1] = fRec27[0];
			fRec28[1] = fRec28[0];
			fRec29[1] = fRec29[0];
			fRec30[1] = fRec30[0];
			fRec31[1] = fRec31[0];
			fRec32[1] = fRec32[0];
			fRec25[1] = fRec25[0];
			fRec26[1] = fRec26[0];
			fRec19[1] = fRec19[0];
			fRec20[1] = fRec20[0];
			fRec21[1] = fRec21[0];
			fRec22[1] = fRec22[0];
			fRec23[1] = fRec23[0];
			fRec24[1] = fRec24[0];
			fVec0[1] = fVec0[0];
			fRec18[1] = fRec18[0];
			fRec15[2] = fRec15[1]; fRec15[1] = fRec15[0];
			fRec17[1] = fRec17[0];
			fRec16[1] = fRec16[0];
			fRec12[2] = fRec12[1]; fRec12[1] = fRec12[0];
			fRec14[1] = fRec14[0];
			fRec13[1] = fRec13[0];
			fRec9[2] = fRec9[1]; fRec9[1] = fRec9[0];
			fRec11[1] = fRec11[0];
			fRec10[1] = fRec10[0];
			fRec2[2] = fRec2[1]; fRec2[1] = fRec2[0];
			fRec8[1] = fRec8[0];
			fRec4[1] = fRec4[0];
			fRec7[1] = fRec7[0];
			fRec6[1] = fRec6[0];
			fRec3[1] = fRec3[0];
			fRec1[1] = fRec1[0];
		}
	}
};


float 	mydsp::ftbl0[65536];
float 	mydsp::ftbl1[246];
