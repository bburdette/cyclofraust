//----------------------------------------------------------
// name: "oscmodsum"
// version: "1.0"
// author: "Grame"
// license: "BSD"
// copyright: "(c)GRAME 2009"
//
// Code generated with Faust 0.9.73 (http://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int 	fSamplingFreq;
		int 	iRec0[2];
	  public:
		int getNumInputs() 	{ return 0; }
		int getNumOutputs() 	{ return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			for (int i=0; i<2; i++) iRec0[i] = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				iRec0[0] = (1 + iRec0[1]);
				output[i] = sinf((9.587379924285257e-05f * float((iRec0[0] - 1))));
				// post processing
				iRec0[1] = iRec0[0];
			}
		}
	};


	static float 	ftbl0[65536];
	FAUSTFLOAT 	fslider0;
	float 	fConst0;
	float 	fConst1;
	float 	fRec1[2];
	FAUSTFLOAT 	fslider1;
	FAUSTFLOAT 	fslider2;
	float 	fRec2[2];
	FAUSTFLOAT 	fslider3;
	FAUSTFLOAT 	fslider4;
	float 	fRec3[2];
	FAUSTFLOAT 	fslider5;
	FAUSTFLOAT 	fslider6;
	float 	fRec4[2];
	FAUSTFLOAT 	fslider7;
	FAUSTFLOAT 	fslider8;
	float 	fRec5[2];
	FAUSTFLOAT 	fslider9;
	FAUSTFLOAT 	fslider10;
	float 	fRec6[2];
	FAUSTFLOAT 	fslider11;
	FAUSTFLOAT 	fslider12;
	float 	fRec7[2];
	FAUSTFLOAT 	fslider13;
	FAUSTFLOAT 	fslider14;
	float 	fRec8[2];
	FAUSTFLOAT 	fslider15;
	FAUSTFLOAT 	fslider16;
	float 	fRec9[2];
	FAUSTFLOAT 	fslider17;
	FAUSTFLOAT 	fslider18;
	float 	fRec10[2];
	FAUSTFLOAT 	fslider19;
	FAUSTFLOAT 	fslider20;
	float 	fRec11[2];
	FAUSTFLOAT 	fslider21;
	FAUSTFLOAT 	fslider22;
	float 	fRec12[2];
	FAUSTFLOAT 	fslider23;
	FAUSTFLOAT 	fslider24;
	float 	fRec13[2];
	FAUSTFLOAT 	fslider25;
	FAUSTFLOAT 	fslider26;
	float 	fRec14[2];
	FAUSTFLOAT 	fslider27;
	FAUSTFLOAT 	fslider28;
	float 	fRec15[2];
	FAUSTFLOAT 	fslider29;
	FAUSTFLOAT 	fslider30;
	float 	fRec16[2];
	FAUSTFLOAT 	fslider31;
	FAUSTFLOAT 	fslider32;
	float 	fRec17[2];
	FAUSTFLOAT 	fslider33;
	FAUSTFLOAT 	fslider34;
	float 	fRec18[2];
	FAUSTFLOAT 	fslider35;
	FAUSTFLOAT 	fslider36;
	float 	fRec19[2];
	FAUSTFLOAT 	fslider37;
	FAUSTFLOAT 	fslider38;
	float 	fRec20[2];
	FAUSTFLOAT 	fslider39;
	FAUSTFLOAT 	fslider40;
	float 	fRec21[2];
	FAUSTFLOAT 	fslider41;
	FAUSTFLOAT 	fslider42;
	float 	fRec22[2];
	FAUSTFLOAT 	fslider43;
	FAUSTFLOAT 	fslider44;
	float 	fRec23[2];
	FAUSTFLOAT 	fslider45;
	FAUSTFLOAT 	fslider46;
	float 	fRec24[2];
	FAUSTFLOAT 	fslider47;
	float 	fConst2;
	float 	fRec25[2];
	float 	fRec26[2];
	float 	fRec27[2];
	float 	fRec28[2];
	float 	fRec29[2];
	float 	fRec30[2];
	float 	fRec31[2];
	float 	fRec32[2];
	float 	fRec33[2];
	float 	fRec34[2];
	float 	fRec35[2];
	float 	fRec36[2];
	float 	fRec37[2];
	float 	fRec38[2];
	float 	fRec39[2];
	float 	fRec40[2];
	float 	fRec41[2];
	float 	fRec42[2];
	float 	fRec43[2];
	float 	fRec44[2];
	float 	fRec45[2];
	float 	fRec46[2];
	float 	fRec47[2];
	float 	fRec48[2];
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "oscmodsum");
		m->declare("version", "1.0");
		m->declare("author", "Grame");
		m->declare("license", "BSD");
		m->declare("copyright", "(c)GRAME 2009");
		m->declare("oscmod.dsp/name", "osc");
		m->declare("oscmod.dsp/version", "1.0");
		m->declare("oscmod.dsp/author", "Grame");
		m->declare("oscmod.dsp/license", "BSD");
		m->declare("oscmod.dsp/copyright", "(c)GRAME 2009");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
	}

	virtual int getNumInputs() 	{ return 0; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
		SIG0 sig0;
		sig0.init(samplingFreq);
		sig0.fill(65536,ftbl0);
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fslider0 = 0.0f;
		fConst0 = float(min(192000, max(1, fSamplingFreq)));
		fConst1 = (float(1000) / fConst0);
		for (int i=0; i<2; i++) fRec1[i] = 0;
		fslider1 = 0.0f;
		fslider2 = 0.0f;
		for (int i=0; i<2; i++) fRec2[i] = 0;
		fslider3 = 0.0f;
		fslider4 = 0.0f;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		fslider5 = 0.0f;
		fslider6 = 0.0f;
		for (int i=0; i<2; i++) fRec4[i] = 0;
		fslider7 = 0.0f;
		fslider8 = 0.0f;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		fslider9 = 0.0f;
		fslider10 = 0.0f;
		for (int i=0; i<2; i++) fRec6[i] = 0;
		fslider11 = 0.0f;
		fslider12 = 0.0f;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		fslider13 = 0.0f;
		fslider14 = 0.0f;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		fslider15 = 0.0f;
		fslider16 = 0.0f;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		fslider17 = 0.0f;
		fslider18 = 0.0f;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		fslider19 = 0.0f;
		fslider20 = 0.0f;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		fslider21 = 0.0f;
		fslider22 = 0.0f;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		fslider23 = 0.0f;
		fslider24 = 0.0f;
		for (int i=0; i<2; i++) fRec13[i] = 0;
		fslider25 = 0.0f;
		fslider26 = 0.0f;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		fslider27 = 0.0f;
		fslider28 = 0.0f;
		for (int i=0; i<2; i++) fRec15[i] = 0;
		fslider29 = 0.0f;
		fslider30 = 0.0f;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		fslider31 = 0.0f;
		fslider32 = 0.0f;
		for (int i=0; i<2; i++) fRec17[i] = 0;
		fslider33 = 0.0f;
		fslider34 = 0.0f;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		fslider35 = 0.0f;
		fslider36 = 0.0f;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		fslider37 = 0.0f;
		fslider38 = 0.0f;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		fslider39 = 0.0f;
		fslider40 = 0.0f;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		fslider41 = 0.0f;
		fslider42 = 0.0f;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		fslider43 = 0.0f;
		fslider44 = 0.0f;
		for (int i=0; i<2; i++) fRec23[i] = 0;
		fslider45 = 0.0f;
		fslider46 = 0.0f;
		for (int i=0; i<2; i++) fRec24[i] = 0;
		fslider47 = 0.0f;
		fConst2 = (1.0f / fConst0);
		for (int i=0; i<2; i++) fRec25[i] = 0;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fRec27[i] = 0;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		for (int i=0; i<2; i++) fRec29[i] = 0;
		for (int i=0; i<2; i++) fRec30[i] = 0;
		for (int i=0; i<2; i++) fRec31[i] = 0;
		for (int i=0; i<2; i++) fRec32[i] = 0;
		for (int i=0; i<2; i++) fRec33[i] = 0;
		for (int i=0; i<2; i++) fRec34[i] = 0;
		for (int i=0; i<2; i++) fRec35[i] = 0;
		for (int i=0; i<2; i++) fRec36[i] = 0;
		for (int i=0; i<2; i++) fRec37[i] = 0;
		for (int i=0; i<2; i++) fRec38[i] = 0;
		for (int i=0; i<2; i++) fRec39[i] = 0;
		for (int i=0; i<2; i++) fRec40[i] = 0;
		for (int i=0; i<2; i++) fRec41[i] = 0;
		for (int i=0; i<2; i++) fRec42[i] = 0;
		for (int i=0; i<2; i++) fRec43[i] = 0;
		for (int i=0; i<2; i++) fRec44[i] = 0;
		for (int i=0; i<2; i++) fRec45[i] = 0;
		for (int i=0; i<2; i++) fRec46[i] = 0;
		for (int i=0; i<2; i++) fRec47[i] = 0;
		for (int i=0; i<2; i++) fRec48[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->openVerticalBox("grp0");
		interface->addHorizontalSlider("amp", &fslider47, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider46, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp1");
		interface->addHorizontalSlider("amp", &fslider45, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider44, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp10");
		interface->addHorizontalSlider("amp", &fslider27, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider26, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp11");
		interface->addHorizontalSlider("amp", &fslider25, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider24, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp12");
		interface->addHorizontalSlider("amp", &fslider23, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider22, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp13");
		interface->addHorizontalSlider("amp", &fslider21, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider20, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp14");
		interface->addHorizontalSlider("amp", &fslider19, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider18, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp15");
		interface->addHorizontalSlider("amp", &fslider17, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider16, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp16");
		interface->addHorizontalSlider("amp", &fslider15, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider14, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp17");
		interface->addHorizontalSlider("amp", &fslider13, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider12, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp18");
		interface->addHorizontalSlider("amp", &fslider11, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider10, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp19");
		interface->addHorizontalSlider("amp", &fslider9, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider8, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp2");
		interface->addHorizontalSlider("amp", &fslider43, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider42, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp20");
		interface->addHorizontalSlider("amp", &fslider7, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider6, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp21");
		interface->addHorizontalSlider("amp", &fslider5, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider4, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp22");
		interface->addHorizontalSlider("amp", &fslider3, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider2, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp23");
		interface->addHorizontalSlider("amp", &fslider1, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider0, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp3");
		interface->addHorizontalSlider("amp", &fslider41, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider40, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp4");
		interface->addHorizontalSlider("amp", &fslider39, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider38, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp5");
		interface->addHorizontalSlider("amp", &fslider37, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider36, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp6");
		interface->addHorizontalSlider("amp", &fslider35, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider34, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp7");
		interface->addHorizontalSlider("amp", &fslider33, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider32, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp8");
		interface->addHorizontalSlider("amp", &fslider31, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider30, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp9");
		interface->addHorizontalSlider("amp", &fslider29, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider28, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = float(fslider0);
		float 	fSlow1 = (fConst1 * fSlow0);
		float 	fSlow2 = float(fslider1);
		float 	fSlow3 = float(fslider2);
		float 	fSlow4 = (fConst1 * fSlow3);
		float 	fSlow5 = float(fslider3);
		float 	fSlow6 = float(fslider4);
		float 	fSlow7 = (fConst1 * fSlow6);
		float 	fSlow8 = float(fslider5);
		float 	fSlow9 = float(fslider6);
		float 	fSlow10 = (fConst1 * fSlow9);
		float 	fSlow11 = float(fslider7);
		float 	fSlow12 = float(fslider8);
		float 	fSlow13 = (fConst1 * fSlow12);
		float 	fSlow14 = float(fslider9);
		float 	fSlow15 = float(fslider10);
		float 	fSlow16 = (fConst1 * fSlow15);
		float 	fSlow17 = float(fslider11);
		float 	fSlow18 = float(fslider12);
		float 	fSlow19 = (fConst1 * fSlow18);
		float 	fSlow20 = float(fslider13);
		float 	fSlow21 = float(fslider14);
		float 	fSlow22 = (fConst1 * fSlow21);
		float 	fSlow23 = float(fslider15);
		float 	fSlow24 = float(fslider16);
		float 	fSlow25 = (fConst1 * fSlow24);
		float 	fSlow26 = float(fslider17);
		float 	fSlow27 = float(fslider18);
		float 	fSlow28 = (fConst1 * fSlow27);
		float 	fSlow29 = float(fslider19);
		float 	fSlow30 = float(fslider20);
		float 	fSlow31 = (fConst1 * fSlow30);
		float 	fSlow32 = float(fslider21);
		float 	fSlow33 = float(fslider22);
		float 	fSlow34 = (fConst1 * fSlow33);
		float 	fSlow35 = float(fslider23);
		float 	fSlow36 = float(fslider24);
		float 	fSlow37 = (fConst1 * fSlow36);
		float 	fSlow38 = float(fslider25);
		float 	fSlow39 = float(fslider26);
		float 	fSlow40 = (fConst1 * fSlow39);
		float 	fSlow41 = float(fslider27);
		float 	fSlow42 = float(fslider28);
		float 	fSlow43 = (fConst1 * fSlow42);
		float 	fSlow44 = float(fslider29);
		float 	fSlow45 = float(fslider30);
		float 	fSlow46 = (fConst1 * fSlow45);
		float 	fSlow47 = float(fslider31);
		float 	fSlow48 = float(fslider32);
		float 	fSlow49 = (fConst1 * fSlow48);
		float 	fSlow50 = float(fslider33);
		float 	fSlow51 = float(fslider34);
		float 	fSlow52 = (fConst1 * fSlow51);
		float 	fSlow53 = float(fslider35);
		float 	fSlow54 = float(fslider36);
		float 	fSlow55 = (fConst1 * fSlow54);
		float 	fSlow56 = float(fslider37);
		float 	fSlow57 = float(fslider38);
		float 	fSlow58 = (fConst1 * fSlow57);
		float 	fSlow59 = float(fslider39);
		float 	fSlow60 = float(fslider40);
		float 	fSlow61 = (fConst1 * fSlow60);
		float 	fSlow62 = float(fslider41);
		float 	fSlow63 = float(fslider42);
		float 	fSlow64 = (fConst1 * fSlow63);
		float 	fSlow65 = float(fslider43);
		float 	fSlow66 = float(fslider44);
		float 	fSlow67 = (fConst1 * fSlow66);
		float 	fSlow68 = float(fslider45);
		float 	fSlow69 = float(fslider46);
		float 	fSlow70 = (fConst1 * fSlow69);
		float 	fSlow71 = float(fslider47);
		float 	fSlow72 = (fConst2 * (100 + (1000 * fSlow0)));
		float 	fSlow73 = (fConst2 * (100 + (1000 * fSlow3)));
		float 	fSlow74 = (fConst2 * (100 + (1000 * fSlow6)));
		float 	fSlow75 = (fConst2 * (100 + (1000 * fSlow9)));
		float 	fSlow76 = (fConst2 * (100 + (1000 * fSlow12)));
		float 	fSlow77 = (fConst2 * (100 + (1000 * fSlow15)));
		float 	fSlow78 = (fConst2 * (100 + (1000 * fSlow18)));
		float 	fSlow79 = (fConst2 * (100 + (1000 * fSlow21)));
		float 	fSlow80 = (fConst2 * (100 + (1000 * fSlow24)));
		float 	fSlow81 = (fConst2 * (100 + (1000 * fSlow27)));
		float 	fSlow82 = (fConst2 * (100 + (1000 * fSlow30)));
		float 	fSlow83 = (fConst2 * (100 + (1000 * fSlow33)));
		float 	fSlow84 = (fConst2 * (100 + (1000 * fSlow36)));
		float 	fSlow85 = (fConst2 * (100 + (1000 * fSlow39)));
		float 	fSlow86 = (fConst2 * (100 + (1000 * fSlow42)));
		float 	fSlow87 = (fConst2 * (100 + (1000 * fSlow45)));
		float 	fSlow88 = (fConst2 * (100 + (1000 * fSlow48)));
		float 	fSlow89 = (fConst2 * (100 + (1000 * fSlow51)));
		float 	fSlow90 = (fConst2 * (100 + (1000 * fSlow54)));
		float 	fSlow91 = (fConst2 * (100 + (1000 * fSlow57)));
		float 	fSlow92 = (fConst2 * (100 + (1000 * fSlow60)));
		float 	fSlow93 = (fConst2 * (100 + (1000 * fSlow63)));
		float 	fSlow94 = (fConst2 * (100 + (1000 * fSlow66)));
		float 	fSlow95 = (fConst2 * (100 + (1000 * fSlow69)));
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			float fTemp0 = (fRec1[1] + fSlow1);
			fRec1[0] = (fTemp0 - floorf(fTemp0));
			float fTemp1 = (fRec2[1] + fSlow4);
			fRec2[0] = (fTemp1 - floorf(fTemp1));
			float fTemp2 = (fRec3[1] + fSlow7);
			fRec3[0] = (fTemp2 - floorf(fTemp2));
			float fTemp3 = (fRec4[1] + fSlow10);
			fRec4[0] = (fTemp3 - floorf(fTemp3));
			float fTemp4 = (fRec5[1] + fSlow13);
			fRec5[0] = (fTemp4 - floorf(fTemp4));
			float fTemp5 = (fRec6[1] + fSlow16);
			fRec6[0] = (fTemp5 - floorf(fTemp5));
			float fTemp6 = (fRec7[1] + fSlow19);
			fRec7[0] = (fTemp6 - floorf(fTemp6));
			float fTemp7 = (fRec8[1] + fSlow22);
			fRec8[0] = (fTemp7 - floorf(fTemp7));
			float fTemp8 = (fRec9[1] + fSlow25);
			fRec9[0] = (fTemp8 - floorf(fTemp8));
			float fTemp9 = (fRec10[1] + fSlow28);
			fRec10[0] = (fTemp9 - floorf(fTemp9));
			float fTemp10 = (fRec11[1] + fSlow31);
			fRec11[0] = (fTemp10 - floorf(fTemp10));
			float fTemp11 = (fRec12[1] + fSlow34);
			fRec12[0] = (fTemp11 - floorf(fTemp11));
			float fTemp12 = (fRec13[1] + fSlow37);
			fRec13[0] = (fTemp12 - floorf(fTemp12));
			float fTemp13 = (fRec14[1] + fSlow40);
			fRec14[0] = (fTemp13 - floorf(fTemp13));
			float fTemp14 = (fRec15[1] + fSlow43);
			fRec15[0] = (fTemp14 - floorf(fTemp14));
			float fTemp15 = (fRec16[1] + fSlow46);
			fRec16[0] = (fTemp15 - floorf(fTemp15));
			float fTemp16 = (fRec17[1] + fSlow49);
			fRec17[0] = (fTemp16 - floorf(fTemp16));
			float fTemp17 = (fRec18[1] + fSlow52);
			fRec18[0] = (fTemp17 - floorf(fTemp17));
			float fTemp18 = (fRec19[1] + fSlow55);
			fRec19[0] = (fTemp18 - floorf(fTemp18));
			float fTemp19 = (fRec20[1] + fSlow58);
			fRec20[0] = (fTemp19 - floorf(fTemp19));
			float fTemp20 = (fRec21[1] + fSlow61);
			fRec21[0] = (fTemp20 - floorf(fTemp20));
			float fTemp21 = (fRec22[1] + fSlow64);
			fRec22[0] = (fTemp21 - floorf(fTemp21));
			float fTemp22 = (fRec23[1] + fSlow67);
			fRec23[0] = (fTemp22 - floorf(fTemp22));
			float fTemp23 = (fRec24[1] + fSlow70);
			fRec24[0] = (fTemp23 - floorf(fTemp23));
			output0[i] = (FAUSTFLOAT)((((((((((((((((((((((((fSlow71 * ftbl0[int((65536.0f * fRec24[0]))]) + (fSlow68 * ftbl0[int((65536.0f * fRec23[0]))])) + (fSlow65 * ftbl0[int((65536.0f * fRec22[0]))])) + (fSlow62 * ftbl0[int((65536.0f * fRec21[0]))])) + (fSlow59 * ftbl0[int((65536.0f * fRec20[0]))])) + (fSlow56 * ftbl0[int((65536.0f * fRec19[0]))])) + (fSlow53 * ftbl0[int((65536.0f * fRec18[0]))])) + (fSlow50 * ftbl0[int((65536.0f * fRec17[0]))])) + (fSlow47 * ftbl0[int((65536.0f * fRec16[0]))])) + (fSlow44 * ftbl0[int((65536.0f * fRec15[0]))])) + (fSlow41 * ftbl0[int((65536.0f * fRec14[0]))])) + (fSlow38 * ftbl0[int((65536.0f * fRec13[0]))])) + (fSlow35 * ftbl0[int((65536.0f * fRec12[0]))])) + (fSlow32 * ftbl0[int((65536.0f * fRec11[0]))])) + (fSlow29 * ftbl0[int((65536.0f * fRec10[0]))])) + (fSlow26 * ftbl0[int((65536.0f * fRec9[0]))])) + (fSlow23 * ftbl0[int((65536.0f * fRec8[0]))])) + (fSlow20 * ftbl0[int((65536.0f * fRec7[0]))])) + (fSlow17 * ftbl0[int((65536.0f * fRec6[0]))])) + (fSlow14 * ftbl0[int((65536.0f * fRec5[0]))])) + (fSlow11 * ftbl0[int((65536.0f * fRec4[0]))])) + (fSlow8 * ftbl0[int((65536.0f * fRec3[0]))])) + (fSlow5 * ftbl0[int((65536.0f * fRec2[0]))])) + (fSlow2 * ftbl0[int((65536.0f * fRec1[0]))]));
			float fTemp24 = (fRec25[1] + fSlow72);
			fRec25[0] = (fTemp24 - floorf(fTemp24));
			float fTemp25 = (fRec26[1] + fSlow73);
			fRec26[0] = (fTemp25 - floorf(fTemp25));
			float fTemp26 = (fRec27[1] + fSlow74);
			fRec27[0] = (fTemp26 - floorf(fTemp26));
			float fTemp27 = (fSlow75 + fRec28[1]);
			fRec28[0] = (fTemp27 - floorf(fTemp27));
			float fTemp28 = (fRec29[1] + fSlow76);
			fRec29[0] = (fTemp28 - floorf(fTemp28));
			float fTemp29 = (fRec30[1] + fSlow77);
			fRec30[0] = (fTemp29 - floorf(fTemp29));
			float fTemp30 = (fRec31[1] + fSlow78);
			fRec31[0] = (fTemp30 - floorf(fTemp30));
			float fTemp31 = (fRec32[1] + fSlow79);
			fRec32[0] = (fTemp31 - floorf(fTemp31));
			float fTemp32 = (fRec33[1] + fSlow80);
			fRec33[0] = (fTemp32 - floorf(fTemp32));
			float fTemp33 = (fRec34[1] + fSlow81);
			fRec34[0] = (fTemp33 - floorf(fTemp33));
			float fTemp34 = (fRec35[1] + fSlow82);
			fRec35[0] = (fTemp34 - floorf(fTemp34));
			float fTemp35 = (fRec36[1] + fSlow83);
			fRec36[0] = (fTemp35 - floorf(fTemp35));
			float fTemp36 = (fRec37[1] + fSlow84);
			fRec37[0] = (fTemp36 - floorf(fTemp36));
			float fTemp37 = (fRec38[1] + fSlow85);
			fRec38[0] = (fTemp37 - floorf(fTemp37));
			float fTemp38 = (fRec39[1] + fSlow86);
			fRec39[0] = (fTemp38 - floorf(fTemp38));
			float fTemp39 = (fRec40[1] + fSlow87);
			fRec40[0] = (fTemp39 - floorf(fTemp39));
			float fTemp40 = (fRec41[1] + fSlow88);
			fRec41[0] = (fTemp40 - floorf(fTemp40));
			float fTemp41 = (fRec42[1] + fSlow89);
			fRec42[0] = (fTemp41 - floorf(fTemp41));
			float fTemp42 = (fRec43[1] + fSlow90);
			fRec43[0] = (fTemp42 - floorf(fTemp42));
			float fTemp43 = (fRec44[1] + fSlow91);
			fRec44[0] = (fTemp43 - floorf(fTemp43));
			float fTemp44 = (fRec45[1] + fSlow92);
			fRec45[0] = (fTemp44 - floorf(fTemp44));
			float fTemp45 = (fRec46[1] + fSlow93);
			fRec46[0] = (fTemp45 - floorf(fTemp45));
			float fTemp46 = (fRec47[1] + fSlow94);
			fRec47[0] = (fTemp46 - floorf(fTemp46));
			float fTemp47 = (fRec48[1] + fSlow95);
			fRec48[0] = (fTemp47 - floorf(fTemp47));
			output1[i] = (FAUSTFLOAT)((((((((((((((((((((((((fSlow71 * ftbl0[int((65536.0f * fRec48[0]))]) + (fSlow68 * ftbl0[int((65536.0f * fRec47[0]))])) + (fSlow65 * ftbl0[int((65536.0f * fRec46[0]))])) + (fSlow62 * ftbl0[int((65536.0f * fRec45[0]))])) + (fSlow59 * ftbl0[int((65536.0f * fRec44[0]))])) + (fSlow56 * ftbl0[int((65536.0f * fRec43[0]))])) + (fSlow53 * ftbl0[int((65536.0f * fRec42[0]))])) + (fSlow50 * ftbl0[int((65536.0f * fRec41[0]))])) + (fSlow47 * ftbl0[int((65536.0f * fRec40[0]))])) + (fSlow44 * ftbl0[int((65536.0f * fRec39[0]))])) + (fSlow41 * ftbl0[int((65536.0f * fRec38[0]))])) + (fSlow38 * ftbl0[int((65536.0f * fRec37[0]))])) + (fSlow35 * ftbl0[int((65536.0f * fRec36[0]))])) + (fSlow32 * ftbl0[int((65536.0f * fRec35[0]))])) + (fSlow29 * ftbl0[int((65536.0f * fRec34[0]))])) + (fSlow26 * ftbl0[int((65536.0f * fRec33[0]))])) + (fSlow23 * ftbl0[int((65536.0f * fRec32[0]))])) + (fSlow20 * ftbl0[int((65536.0f * fRec31[0]))])) + (fSlow17 * ftbl0[int((65536.0f * fRec30[0]))])) + (fSlow14 * ftbl0[int((65536.0f * fRec29[0]))])) + (fSlow11 * ftbl0[int((65536.0f * fRec28[0]))])) + (fSlow8 * ftbl0[int((65536.0f * fRec27[0]))])) + (fSlow5 * ftbl0[int((65536.0f * fRec26[0]))])) + (fSlow2 * ftbl0[int((65536.0f * fRec25[0]))]));
			// post processing
			fRec48[1] = fRec48[0];
			fRec47[1] = fRec47[0];
			fRec46[1] = fRec46[0];
			fRec45[1] = fRec45[0];
			fRec44[1] = fRec44[0];
			fRec43[1] = fRec43[0];
			fRec42[1] = fRec42[0];
			fRec41[1] = fRec41[0];
			fRec40[1] = fRec40[0];
			fRec39[1] = fRec39[0];
			fRec38[1] = fRec38[0];
			fRec37[1] = fRec37[0];
			fRec36[1] = fRec36[0];
			fRec35[1] = fRec35[0];
			fRec34[1] = fRec34[0];
			fRec33[1] = fRec33[0];
			fRec32[1] = fRec32[0];
			fRec31[1] = fRec31[0];
			fRec30[1] = fRec30[0];
			fRec29[1] = fRec29[0];
			fRec28[1] = fRec28[0];
			fRec27[1] = fRec27[0];
			fRec26[1] = fRec26[0];
			fRec25[1] = fRec25[0];
			fRec24[1] = fRec24[0];
			fRec23[1] = fRec23[0];
			fRec22[1] = fRec22[0];
			fRec21[1] = fRec21[0];
			fRec20[1] = fRec20[0];
			fRec19[1] = fRec19[0];
			fRec18[1] = fRec18[0];
			fRec17[1] = fRec17[0];
			fRec16[1] = fRec16[0];
			fRec15[1] = fRec15[0];
			fRec14[1] = fRec14[0];
			fRec13[1] = fRec13[0];
			fRec12[1] = fRec12[0];
			fRec11[1] = fRec11[0];
			fRec10[1] = fRec10[0];
			fRec9[1] = fRec9[0];
			fRec8[1] = fRec8[0];
			fRec7[1] = fRec7[0];
			fRec6[1] = fRec6[0];
			fRec5[1] = fRec5[0];
			fRec4[1] = fRec4[0];
			fRec3[1] = fRec3[0];
			fRec2[1] = fRec2[0];
			fRec1[1] = fRec1[0];
		}
	}
};


float 	mydsp::ftbl0[65536];
