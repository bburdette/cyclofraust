//----------------------------------------------------------
// name: "oscmodsum"
// version: "1.0"
// author: "Grame"
// license: "BSD"
// copyright: "(c)GRAME 2009"
//
// Code generated with Faust 0.9.73 (http://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int 	fSamplingFreq;
		int 	iRec0[2];
	  public:
		int getNumInputs() 	{ return 0; }
		int getNumOutputs() 	{ return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			for (int i=0; i<2; i++) iRec0[i] = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				iRec0[0] = (1 + iRec0[1]);
				output[i] = sinf((9.587379924285257e-05f * float((iRec0[0] - 1))));
				// post processing
				iRec0[1] = iRec0[0];
			}
		}
	};


	static float 	ftbl0[65536];
	FAUSTFLOAT 	fslider0;
	float 	fRec2[2];
	float 	fConst0;
	float 	fRec1[2];
	float 	fRec3[2];
	FAUSTFLOAT 	fslider1;
	float 	fRec4[2];
	FAUSTFLOAT 	fslider2;
	float 	fRec6[2];
	float 	fRec5[2];
	float 	fRec7[2];
	FAUSTFLOAT 	fslider3;
	float 	fRec8[2];
	FAUSTFLOAT 	fslider4;
	float 	fRec10[2];
	float 	fRec9[2];
	float 	fRec11[2];
	FAUSTFLOAT 	fslider5;
	float 	fRec12[2];
	FAUSTFLOAT 	fslider6;
	float 	fRec14[2];
	float 	fRec13[2];
	float 	fRec15[2];
	FAUSTFLOAT 	fslider7;
	float 	fRec16[2];
	FAUSTFLOAT 	fslider8;
	float 	fRec18[2];
	float 	fRec17[2];
	float 	fRec19[2];
	FAUSTFLOAT 	fslider9;
	float 	fRec20[2];
	FAUSTFLOAT 	fslider10;
	float 	fRec22[2];
	float 	fRec21[2];
	float 	fRec23[2];
	FAUSTFLOAT 	fslider11;
	float 	fRec24[2];
	FAUSTFLOAT 	fslider12;
	float 	fRec26[2];
	float 	fRec25[2];
	float 	fRec27[2];
	FAUSTFLOAT 	fslider13;
	float 	fRec28[2];
	FAUSTFLOAT 	fslider14;
	float 	fRec30[2];
	float 	fRec29[2];
	float 	fRec31[2];
	FAUSTFLOAT 	fslider15;
	float 	fRec32[2];
	FAUSTFLOAT 	fslider16;
	float 	fRec34[2];
	float 	fRec33[2];
	float 	fRec35[2];
	FAUSTFLOAT 	fslider17;
	float 	fRec36[2];
	FAUSTFLOAT 	fslider18;
	float 	fRec38[2];
	float 	fRec37[2];
	float 	fRec39[2];
	FAUSTFLOAT 	fslider19;
	float 	fRec40[2];
	FAUSTFLOAT 	fslider20;
	float 	fRec42[2];
	float 	fRec41[2];
	float 	fRec43[2];
	FAUSTFLOAT 	fslider21;
	float 	fRec44[2];
	FAUSTFLOAT 	fslider22;
	float 	fRec46[2];
	float 	fRec45[2];
	float 	fRec47[2];
	FAUSTFLOAT 	fslider23;
	float 	fRec48[2];
	FAUSTFLOAT 	fslider24;
	float 	fRec50[2];
	float 	fRec49[2];
	float 	fRec51[2];
	FAUSTFLOAT 	fslider25;
	float 	fRec52[2];
	FAUSTFLOAT 	fslider26;
	float 	fRec54[2];
	float 	fRec53[2];
	float 	fRec55[2];
	FAUSTFLOAT 	fslider27;
	float 	fRec56[2];
	FAUSTFLOAT 	fslider28;
	float 	fRec58[2];
	float 	fRec57[2];
	float 	fRec59[2];
	FAUSTFLOAT 	fslider29;
	float 	fRec60[2];
	FAUSTFLOAT 	fslider30;
	float 	fRec62[2];
	float 	fRec61[2];
	float 	fRec63[2];
	FAUSTFLOAT 	fslider31;
	float 	fRec64[2];
	FAUSTFLOAT 	fslider32;
	float 	fRec66[2];
	float 	fRec65[2];
	float 	fRec67[2];
	FAUSTFLOAT 	fslider33;
	float 	fRec68[2];
	FAUSTFLOAT 	fslider34;
	float 	fRec70[2];
	float 	fRec69[2];
	float 	fRec71[2];
	FAUSTFLOAT 	fslider35;
	float 	fRec72[2];
	FAUSTFLOAT 	fslider36;
	float 	fRec74[2];
	float 	fRec73[2];
	float 	fRec75[2];
	FAUSTFLOAT 	fslider37;
	float 	fRec76[2];
	FAUSTFLOAT 	fslider38;
	float 	fRec78[2];
	float 	fRec77[2];
	float 	fRec79[2];
	FAUSTFLOAT 	fslider39;
	float 	fRec80[2];
	FAUSTFLOAT 	fslider40;
	float 	fRec82[2];
	float 	fRec81[2];
	float 	fRec83[2];
	FAUSTFLOAT 	fslider41;
	float 	fRec84[2];
	FAUSTFLOAT 	fslider42;
	float 	fRec86[2];
	float 	fRec85[2];
	float 	fRec87[2];
	FAUSTFLOAT 	fslider43;
	float 	fRec88[2];
	FAUSTFLOAT 	fslider44;
	float 	fRec90[2];
	float 	fRec89[2];
	float 	fRec91[2];
	FAUSTFLOAT 	fslider45;
	float 	fRec92[2];
	FAUSTFLOAT 	fslider46;
	float 	fRec94[2];
	float 	fRec93[2];
	float 	fRec95[2];
	FAUSTFLOAT 	fslider47;
	float 	fRec96[2];
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "oscmodsum");
		m->declare("version", "1.0");
		m->declare("author", "Grame");
		m->declare("license", "BSD");
		m->declare("copyright", "(c)GRAME 2009");
		m->declare("oscmod.dsp/name", "osc");
		m->declare("oscmod.dsp/version", "1.0");
		m->declare("oscmod.dsp/author", "Grame");
		m->declare("oscmod.dsp/license", "BSD");
		m->declare("oscmod.dsp/copyright", "(c)GRAME 2009");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
	}

	virtual int getNumInputs() 	{ return 0; }
	virtual int getNumOutputs() 	{ return 1; }
	static void classInit(int samplingFreq) {
		SIG0 sig0;
		sig0.init(samplingFreq);
		sig0.fill(65536,ftbl0);
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fslider0 = 0.0f;
		for (int i=0; i<2; i++) fRec2[i] = 0;
		fConst0 = (1.0f / float(min(192000, max(1, fSamplingFreq))));
		for (int i=0; i<2; i++) fRec1[i] = 0;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		fslider1 = 0.0f;
		for (int i=0; i<2; i++) fRec4[i] = 0;
		fslider2 = 0.0f;
		for (int i=0; i<2; i++) fRec6[i] = 0;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		fslider3 = 0.0f;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		fslider4 = 0.0f;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		fslider5 = 0.0f;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		fslider6 = 0.0f;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		for (int i=0; i<2; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fRec15[i] = 0;
		fslider7 = 0.0f;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		fslider8 = 0.0f;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		for (int i=0; i<2; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		fslider9 = 0.0f;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		fslider10 = 0.0f;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<2; i++) fRec23[i] = 0;
		fslider11 = 0.0f;
		for (int i=0; i<2; i++) fRec24[i] = 0;
		fslider12 = 0.0f;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fRec25[i] = 0;
		for (int i=0; i<2; i++) fRec27[i] = 0;
		fslider13 = 0.0f;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		fslider14 = 0.0f;
		for (int i=0; i<2; i++) fRec30[i] = 0;
		for (int i=0; i<2; i++) fRec29[i] = 0;
		for (int i=0; i<2; i++) fRec31[i] = 0;
		fslider15 = 0.0f;
		for (int i=0; i<2; i++) fRec32[i] = 0;
		fslider16 = 0.0f;
		for (int i=0; i<2; i++) fRec34[i] = 0;
		for (int i=0; i<2; i++) fRec33[i] = 0;
		for (int i=0; i<2; i++) fRec35[i] = 0;
		fslider17 = 0.0f;
		for (int i=0; i<2; i++) fRec36[i] = 0;
		fslider18 = 0.0f;
		for (int i=0; i<2; i++) fRec38[i] = 0;
		for (int i=0; i<2; i++) fRec37[i] = 0;
		for (int i=0; i<2; i++) fRec39[i] = 0;
		fslider19 = 0.0f;
		for (int i=0; i<2; i++) fRec40[i] = 0;
		fslider20 = 0.0f;
		for (int i=0; i<2; i++) fRec42[i] = 0;
		for (int i=0; i<2; i++) fRec41[i] = 0;
		for (int i=0; i<2; i++) fRec43[i] = 0;
		fslider21 = 0.0f;
		for (int i=0; i<2; i++) fRec44[i] = 0;
		fslider22 = 0.0f;
		for (int i=0; i<2; i++) fRec46[i] = 0;
		for (int i=0; i<2; i++) fRec45[i] = 0;
		for (int i=0; i<2; i++) fRec47[i] = 0;
		fslider23 = 0.0f;
		for (int i=0; i<2; i++) fRec48[i] = 0;
		fslider24 = 0.0f;
		for (int i=0; i<2; i++) fRec50[i] = 0;
		for (int i=0; i<2; i++) fRec49[i] = 0;
		for (int i=0; i<2; i++) fRec51[i] = 0;
		fslider25 = 0.0f;
		for (int i=0; i<2; i++) fRec52[i] = 0;
		fslider26 = 0.0f;
		for (int i=0; i<2; i++) fRec54[i] = 0;
		for (int i=0; i<2; i++) fRec53[i] = 0;
		for (int i=0; i<2; i++) fRec55[i] = 0;
		fslider27 = 0.0f;
		for (int i=0; i<2; i++) fRec56[i] = 0;
		fslider28 = 0.0f;
		for (int i=0; i<2; i++) fRec58[i] = 0;
		for (int i=0; i<2; i++) fRec57[i] = 0;
		for (int i=0; i<2; i++) fRec59[i] = 0;
		fslider29 = 0.0f;
		for (int i=0; i<2; i++) fRec60[i] = 0;
		fslider30 = 0.0f;
		for (int i=0; i<2; i++) fRec62[i] = 0;
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<2; i++) fRec63[i] = 0;
		fslider31 = 0.0f;
		for (int i=0; i<2; i++) fRec64[i] = 0;
		fslider32 = 0.0f;
		for (int i=0; i<2; i++) fRec66[i] = 0;
		for (int i=0; i<2; i++) fRec65[i] = 0;
		for (int i=0; i<2; i++) fRec67[i] = 0;
		fslider33 = 0.0f;
		for (int i=0; i<2; i++) fRec68[i] = 0;
		fslider34 = 0.0f;
		for (int i=0; i<2; i++) fRec70[i] = 0;
		for (int i=0; i<2; i++) fRec69[i] = 0;
		for (int i=0; i<2; i++) fRec71[i] = 0;
		fslider35 = 0.0f;
		for (int i=0; i<2; i++) fRec72[i] = 0;
		fslider36 = 0.0f;
		for (int i=0; i<2; i++) fRec74[i] = 0;
		for (int i=0; i<2; i++) fRec73[i] = 0;
		for (int i=0; i<2; i++) fRec75[i] = 0;
		fslider37 = 0.0f;
		for (int i=0; i<2; i++) fRec76[i] = 0;
		fslider38 = 0.0f;
		for (int i=0; i<2; i++) fRec78[i] = 0;
		for (int i=0; i<2; i++) fRec77[i] = 0;
		for (int i=0; i<2; i++) fRec79[i] = 0;
		fslider39 = 0.0f;
		for (int i=0; i<2; i++) fRec80[i] = 0;
		fslider40 = 0.0f;
		for (int i=0; i<2; i++) fRec82[i] = 0;
		for (int i=0; i<2; i++) fRec81[i] = 0;
		for (int i=0; i<2; i++) fRec83[i] = 0;
		fslider41 = 0.0f;
		for (int i=0; i<2; i++) fRec84[i] = 0;
		fslider42 = 0.0f;
		for (int i=0; i<2; i++) fRec86[i] = 0;
		for (int i=0; i<2; i++) fRec85[i] = 0;
		for (int i=0; i<2; i++) fRec87[i] = 0;
		fslider43 = 0.0f;
		for (int i=0; i<2; i++) fRec88[i] = 0;
		fslider44 = 0.0f;
		for (int i=0; i<2; i++) fRec90[i] = 0;
		for (int i=0; i<2; i++) fRec89[i] = 0;
		for (int i=0; i<2; i++) fRec91[i] = 0;
		fslider45 = 0.0f;
		for (int i=0; i<2; i++) fRec92[i] = 0;
		fslider46 = 0.0f;
		for (int i=0; i<2; i++) fRec94[i] = 0;
		for (int i=0; i<2; i++) fRec93[i] = 0;
		for (int i=0; i<2; i++) fRec95[i] = 0;
		fslider47 = 0.0f;
		for (int i=0; i<2; i++) fRec96[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->openVerticalBox("grp0");
		interface->addHorizontalSlider("amp", &fslider47, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider46, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp1");
		interface->addHorizontalSlider("amp", &fslider45, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider44, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp10");
		interface->addHorizontalSlider("amp", &fslider27, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider26, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp11");
		interface->addHorizontalSlider("amp", &fslider25, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider24, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp12");
		interface->addHorizontalSlider("amp", &fslider23, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider22, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp13");
		interface->addHorizontalSlider("amp", &fslider21, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider20, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp14");
		interface->addHorizontalSlider("amp", &fslider19, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider18, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp15");
		interface->addHorizontalSlider("amp", &fslider17, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider16, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp16");
		interface->addHorizontalSlider("amp", &fslider15, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider14, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp17");
		interface->addHorizontalSlider("amp", &fslider13, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider12, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp18");
		interface->addHorizontalSlider("amp", &fslider11, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider10, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp19");
		interface->addHorizontalSlider("amp", &fslider9, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider8, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp2");
		interface->addHorizontalSlider("amp", &fslider43, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider42, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp20");
		interface->addHorizontalSlider("amp", &fslider7, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider6, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp21");
		interface->addHorizontalSlider("amp", &fslider5, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider4, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp22");
		interface->addHorizontalSlider("amp", &fslider3, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider2, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp23");
		interface->addHorizontalSlider("amp", &fslider1, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider0, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp3");
		interface->addHorizontalSlider("amp", &fslider41, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider40, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp4");
		interface->addHorizontalSlider("amp", &fslider39, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider38, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp5");
		interface->addHorizontalSlider("amp", &fslider37, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider36, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp6");
		interface->addHorizontalSlider("amp", &fslider35, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider34, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp7");
		interface->addHorizontalSlider("amp", &fslider33, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider32, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp8");
		interface->addHorizontalSlider("amp", &fslider31, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider30, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("grp9");
		interface->addHorizontalSlider("amp", &fslider29, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->addHorizontalSlider("freq", &fslider28, 0.0f, 0.5f, 1.0f, 1.0f);
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = (1.0000000000000009f * float(fslider0));
		float 	fSlow1 = (0.010000000000000009f * float(fslider1));
		float 	fSlow2 = (1.0000000000000009f * float(fslider2));
		float 	fSlow3 = (0.010000000000000009f * float(fslider3));
		float 	fSlow4 = (1.0000000000000009f * float(fslider4));
		float 	fSlow5 = (0.010000000000000009f * float(fslider5));
		float 	fSlow6 = (1.0000000000000009f * float(fslider6));
		float 	fSlow7 = (0.010000000000000009f * float(fslider7));
		float 	fSlow8 = (1.0000000000000009f * float(fslider8));
		float 	fSlow9 = (0.010000000000000009f * float(fslider9));
		float 	fSlow10 = (1.0000000000000009f * float(fslider10));
		float 	fSlow11 = (0.010000000000000009f * float(fslider11));
		float 	fSlow12 = (1.0000000000000009f * float(fslider12));
		float 	fSlow13 = (0.010000000000000009f * float(fslider13));
		float 	fSlow14 = (1.0000000000000009f * float(fslider14));
		float 	fSlow15 = (0.010000000000000009f * float(fslider15));
		float 	fSlow16 = (1.0000000000000009f * float(fslider16));
		float 	fSlow17 = (0.010000000000000009f * float(fslider17));
		float 	fSlow18 = (1.0000000000000009f * float(fslider18));
		float 	fSlow19 = (0.010000000000000009f * float(fslider19));
		float 	fSlow20 = (1.0000000000000009f * float(fslider20));
		float 	fSlow21 = (0.010000000000000009f * float(fslider21));
		float 	fSlow22 = (1.0000000000000009f * float(fslider22));
		float 	fSlow23 = (0.010000000000000009f * float(fslider23));
		float 	fSlow24 = (1.0000000000000009f * float(fslider24));
		float 	fSlow25 = (0.010000000000000009f * float(fslider25));
		float 	fSlow26 = (1.0000000000000009f * float(fslider26));
		float 	fSlow27 = (0.010000000000000009f * float(fslider27));
		float 	fSlow28 = (1.0000000000000009f * float(fslider28));
		float 	fSlow29 = (0.010000000000000009f * float(fslider29));
		float 	fSlow30 = (1.0000000000000009f * float(fslider30));
		float 	fSlow31 = (0.010000000000000009f * float(fslider31));
		float 	fSlow32 = (1.0000000000000009f * float(fslider32));
		float 	fSlow33 = (0.010000000000000009f * float(fslider33));
		float 	fSlow34 = (1.0000000000000009f * float(fslider34));
		float 	fSlow35 = (0.010000000000000009f * float(fslider35));
		float 	fSlow36 = (1.0000000000000009f * float(fslider36));
		float 	fSlow37 = (0.010000000000000009f * float(fslider37));
		float 	fSlow38 = (1.0000000000000009f * float(fslider38));
		float 	fSlow39 = (0.010000000000000009f * float(fslider39));
		float 	fSlow40 = (1.0000000000000009f * float(fslider40));
		float 	fSlow41 = (0.010000000000000009f * float(fslider41));
		float 	fSlow42 = (1.0000000000000009f * float(fslider42));
		float 	fSlow43 = (0.010000000000000009f * float(fslider43));
		float 	fSlow44 = (1.0000000000000009f * float(fslider44));
		float 	fSlow45 = (0.010000000000000009f * float(fslider45));
		float 	fSlow46 = (1.0000000000000009f * float(fslider46));
		float 	fSlow47 = (0.010000000000000009f * float(fslider47));
		FAUSTFLOAT* output0 = output[0];
		for (int i=0; i<count; i++) {
			fRec2[0] = ((0.999f * fRec2[1]) + fSlow0);
			float fTemp0 = (fRec1[1] + (fConst0 * fRec2[0]));
			fRec1[0] = (fTemp0 - floorf(fTemp0));
			float fTemp1 = (fRec3[1] + (fConst0 * (150 + fRec2[0])));
			fRec3[0] = (fTemp1 - floorf(fTemp1));
			fRec4[0] = ((0.99f * fRec4[1]) + fSlow1);
			fRec6[0] = ((0.999f * fRec6[1]) + fSlow2);
			float fTemp2 = (fRec5[1] + (fConst0 * fRec6[0]));
			fRec5[0] = (fTemp2 - floorf(fTemp2));
			float fTemp3 = (fRec7[1] + (fConst0 * (150 + fRec6[0])));
			fRec7[0] = (fTemp3 - floorf(fTemp3));
			fRec8[0] = ((0.99f * fRec8[1]) + fSlow3);
			fRec10[0] = ((0.999f * fRec10[1]) + fSlow4);
			float fTemp4 = (fRec9[1] + (fConst0 * fRec10[0]));
			fRec9[0] = (fTemp4 - floorf(fTemp4));
			float fTemp5 = (fRec11[1] + (fConst0 * (150 + fRec10[0])));
			fRec11[0] = (fTemp5 - floorf(fTemp5));
			fRec12[0] = ((0.99f * fRec12[1]) + fSlow5);
			fRec14[0] = ((0.999f * fRec14[1]) + fSlow6);
			float fTemp6 = (fRec13[1] + (fConst0 * fRec14[0]));
			fRec13[0] = (fTemp6 - floorf(fTemp6));
			float fTemp7 = (fRec15[1] + (fConst0 * (150 + fRec14[0])));
			fRec15[0] = (fTemp7 - floorf(fTemp7));
			fRec16[0] = ((0.99f * fRec16[1]) + fSlow7);
			fRec18[0] = ((0.999f * fRec18[1]) + fSlow8);
			float fTemp8 = (fRec17[1] + (fConst0 * fRec18[0]));
			fRec17[0] = (fTemp8 - floorf(fTemp8));
			float fTemp9 = (fRec19[1] + (fConst0 * (150 + fRec18[0])));
			fRec19[0] = (fTemp9 - floorf(fTemp9));
			fRec20[0] = ((0.99f * fRec20[1]) + fSlow9);
			fRec22[0] = ((0.999f * fRec22[1]) + fSlow10);
			float fTemp10 = (fRec21[1] + (fConst0 * fRec22[0]));
			fRec21[0] = (fTemp10 - floorf(fTemp10));
			float fTemp11 = (fRec23[1] + (fConst0 * (150 + fRec22[0])));
			fRec23[0] = (fTemp11 - floorf(fTemp11));
			fRec24[0] = ((0.99f * fRec24[1]) + fSlow11);
			fRec26[0] = ((0.999f * fRec26[1]) + fSlow12);
			float fTemp12 = (fRec25[1] + (fConst0 * fRec26[0]));
			fRec25[0] = (fTemp12 - floorf(fTemp12));
			float fTemp13 = (fRec27[1] + (fConst0 * (150 + fRec26[0])));
			fRec27[0] = (fTemp13 - floorf(fTemp13));
			fRec28[0] = ((0.99f * fRec28[1]) + fSlow13);
			fRec30[0] = ((0.999f * fRec30[1]) + fSlow14);
			float fTemp14 = (fRec29[1] + (fConst0 * fRec30[0]));
			fRec29[0] = (fTemp14 - floorf(fTemp14));
			float fTemp15 = (fRec31[1] + (fConst0 * (150 + fRec30[0])));
			fRec31[0] = (fTemp15 - floorf(fTemp15));
			fRec32[0] = ((0.99f * fRec32[1]) + fSlow15);
			fRec34[0] = ((0.999f * fRec34[1]) + fSlow16);
			float fTemp16 = (fRec33[1] + (fConst0 * fRec34[0]));
			fRec33[0] = (fTemp16 - floorf(fTemp16));
			float fTemp17 = (fRec35[1] + (fConst0 * (150 + fRec34[0])));
			fRec35[0] = (fTemp17 - floorf(fTemp17));
			fRec36[0] = ((0.99f * fRec36[1]) + fSlow17);
			fRec38[0] = ((0.999f * fRec38[1]) + fSlow18);
			float fTemp18 = (fRec37[1] + (fConst0 * fRec38[0]));
			fRec37[0] = (fTemp18 - floorf(fTemp18));
			float fTemp19 = (fRec39[1] + (fConst0 * (150 + fRec38[0])));
			fRec39[0] = (fTemp19 - floorf(fTemp19));
			fRec40[0] = ((0.99f * fRec40[1]) + fSlow19);
			fRec42[0] = ((0.999f * fRec42[1]) + fSlow20);
			float fTemp20 = (fRec41[1] + (fConst0 * fRec42[0]));
			fRec41[0] = (fTemp20 - floorf(fTemp20));
			float fTemp21 = (fRec43[1] + (fConst0 * (150 + fRec42[0])));
			fRec43[0] = (fTemp21 - floorf(fTemp21));
			fRec44[0] = ((0.99f * fRec44[1]) + fSlow21);
			fRec46[0] = ((0.999f * fRec46[1]) + fSlow22);
			float fTemp22 = (fRec45[1] + (fConst0 * fRec46[0]));
			fRec45[0] = (fTemp22 - floorf(fTemp22));
			float fTemp23 = (fRec47[1] + (fConst0 * (150 + fRec46[0])));
			fRec47[0] = (fTemp23 - floorf(fTemp23));
			fRec48[0] = ((0.99f * fRec48[1]) + fSlow23);
			fRec50[0] = ((0.999f * fRec50[1]) + fSlow24);
			float fTemp24 = (fRec49[1] + (fConst0 * fRec50[0]));
			fRec49[0] = (fTemp24 - floorf(fTemp24));
			float fTemp25 = (fRec51[1] + (fConst0 * (150 + fRec50[0])));
			fRec51[0] = (fTemp25 - floorf(fTemp25));
			fRec52[0] = ((0.99f * fRec52[1]) + fSlow25);
			fRec54[0] = ((0.999f * fRec54[1]) + fSlow26);
			float fTemp26 = (fRec53[1] + (fConst0 * fRec54[0]));
			fRec53[0] = (fTemp26 - floorf(fTemp26));
			float fTemp27 = (fRec55[1] + (fConst0 * (150 + fRec54[0])));
			fRec55[0] = (fTemp27 - floorf(fTemp27));
			fRec56[0] = ((0.99f * fRec56[1]) + fSlow27);
			fRec58[0] = ((0.999f * fRec58[1]) + fSlow28);
			float fTemp28 = (fRec57[1] + (fConst0 * fRec58[0]));
			fRec57[0] = (fTemp28 - floorf(fTemp28));
			float fTemp29 = (fRec59[1] + (fConst0 * (150 + fRec58[0])));
			fRec59[0] = (fTemp29 - floorf(fTemp29));
			fRec60[0] = ((0.99f * fRec60[1]) + fSlow29);
			fRec62[0] = ((0.999f * fRec62[1]) + fSlow30);
			float fTemp30 = (fRec61[1] + (fConst0 * fRec62[0]));
			fRec61[0] = (fTemp30 - floorf(fTemp30));
			float fTemp31 = (fRec63[1] + (fConst0 * (150 + fRec62[0])));
			fRec63[0] = (fTemp31 - floorf(fTemp31));
			fRec64[0] = ((0.99f * fRec64[1]) + fSlow31);
			fRec66[0] = ((0.999f * fRec66[1]) + fSlow32);
			float fTemp32 = (fRec65[1] + (fConst0 * fRec66[0]));
			fRec65[0] = (fTemp32 - floorf(fTemp32));
			float fTemp33 = (fRec67[1] + (fConst0 * (150 + fRec66[0])));
			fRec67[0] = (fTemp33 - floorf(fTemp33));
			fRec68[0] = ((0.99f * fRec68[1]) + fSlow33);
			fRec70[0] = ((0.999f * fRec70[1]) + fSlow34);
			float fTemp34 = (fRec69[1] + (fConst0 * fRec70[0]));
			fRec69[0] = (fTemp34 - floorf(fTemp34));
			float fTemp35 = (fRec71[1] + (fConst0 * (150 + fRec70[0])));
			fRec71[0] = (fTemp35 - floorf(fTemp35));
			fRec72[0] = ((0.99f * fRec72[1]) + fSlow35);
			fRec74[0] = ((0.999f * fRec74[1]) + fSlow36);
			float fTemp36 = (fRec73[1] + (fConst0 * fRec74[0]));
			fRec73[0] = (fTemp36 - floorf(fTemp36));
			float fTemp37 = (fRec75[1] + (fConst0 * (150 + fRec74[0])));
			fRec75[0] = (fTemp37 - floorf(fTemp37));
			fRec76[0] = ((0.99f * fRec76[1]) + fSlow37);
			fRec78[0] = ((0.999f * fRec78[1]) + fSlow38);
			float fTemp38 = (fRec77[1] + (fConst0 * fRec78[0]));
			fRec77[0] = (fTemp38 - floorf(fTemp38));
			float fTemp39 = (fRec79[1] + (fConst0 * (150 + fRec78[0])));
			fRec79[0] = (fTemp39 - floorf(fTemp39));
			fRec80[0] = ((0.99f * fRec80[1]) + fSlow39);
			fRec82[0] = ((0.999f * fRec82[1]) + fSlow40);
			float fTemp40 = (fRec81[1] + (fConst0 * fRec82[0]));
			fRec81[0] = (fTemp40 - floorf(fTemp40));
			float fTemp41 = (fRec83[1] + (fConst0 * (150 + fRec82[0])));
			fRec83[0] = (fTemp41 - floorf(fTemp41));
			fRec84[0] = ((0.99f * fRec84[1]) + fSlow41);
			fRec86[0] = ((0.999f * fRec86[1]) + fSlow42);
			float fTemp42 = (fRec85[1] + (fConst0 * fRec86[0]));
			fRec85[0] = (fTemp42 - floorf(fTemp42));
			float fTemp43 = (fRec87[1] + (fConst0 * (150 + fRec86[0])));
			fRec87[0] = (fTemp43 - floorf(fTemp43));
			fRec88[0] = ((0.99f * fRec88[1]) + fSlow43);
			fRec90[0] = ((0.999f * fRec90[1]) + fSlow44);
			float fTemp44 = (fRec89[1] + (fConst0 * fRec90[0]));
			fRec89[0] = (fTemp44 - floorf(fTemp44));
			float fTemp45 = (fRec91[1] + (fConst0 * (150 + fRec90[0])));
			fRec91[0] = (fTemp45 - floorf(fTemp45));
			fRec92[0] = ((0.99f * fRec92[1]) + fSlow45);
			fRec94[0] = ((0.999f * fRec94[1]) + fSlow46);
			float fTemp46 = (fRec93[1] + (fConst0 * fRec94[0]));
			fRec93[0] = (fTemp46 - floorf(fTemp46));
			float fTemp47 = (fRec95[1] + (fConst0 * (150 + fRec94[0])));
			fRec95[0] = (fTemp47 - floorf(fTemp47));
			fRec96[0] = ((0.99f * fRec96[1]) + fSlow47);
			output0[i] = (FAUSTFLOAT)((((((((((((((((((((((((fRec96[0] * (ftbl0[int((65536.0f * fRec95[0]))] + ftbl0[int((65536.0f * fRec93[0]))])) + (fRec92[0] * (ftbl0[int((65536.0f * fRec91[0]))] + ftbl0[int((65536.0f * fRec89[0]))]))) + (fRec88[0] * (ftbl0[int((65536.0f * fRec87[0]))] + ftbl0[int((65536.0f * fRec85[0]))]))) + (fRec84[0] * (ftbl0[int((65536.0f * fRec83[0]))] + ftbl0[int((65536.0f * fRec81[0]))]))) + (fRec80[0] * (ftbl0[int((65536.0f * fRec79[0]))] + ftbl0[int((65536.0f * fRec77[0]))]))) + (fRec76[0] * (ftbl0[int((65536.0f * fRec75[0]))] + ftbl0[int((65536.0f * fRec73[0]))]))) + (fRec72[0] * (ftbl0[int((65536.0f * fRec71[0]))] + ftbl0[int((65536.0f * fRec69[0]))]))) + (fRec68[0] * (ftbl0[int((65536.0f * fRec67[0]))] + ftbl0[int((65536.0f * fRec65[0]))]))) + (fRec64[0] * (ftbl0[int((65536.0f * fRec63[0]))] + ftbl0[int((65536.0f * fRec61[0]))]))) + (fRec60[0] * (ftbl0[int((65536.0f * fRec59[0]))] + ftbl0[int((65536.0f * fRec57[0]))]))) + (fRec56[0] * (ftbl0[int((65536.0f * fRec55[0]))] + ftbl0[int((65536.0f * fRec53[0]))]))) + (fRec52[0] * (ftbl0[int((65536.0f * fRec51[0]))] + ftbl0[int((65536.0f * fRec49[0]))]))) + (fRec48[0] * (ftbl0[int((65536.0f * fRec47[0]))] + ftbl0[int((65536.0f * fRec45[0]))]))) + (fRec44[0] * (ftbl0[int((65536.0f * fRec43[0]))] + ftbl0[int((65536.0f * fRec41[0]))]))) + (fRec40[0] * (ftbl0[int((65536.0f * fRec39[0]))] + ftbl0[int((65536.0f * fRec37[0]))]))) + (fRec36[0] * (ftbl0[int((65536.0f * fRec35[0]))] + ftbl0[int((65536.0f * fRec33[0]))]))) + (fRec32[0] * (ftbl0[int((65536.0f * fRec31[0]))] + ftbl0[int((65536.0f * fRec29[0]))]))) + (fRec28[0] * (ftbl0[int((65536.0f * fRec27[0]))] + ftbl0[int((65536.0f * fRec25[0]))]))) + (fRec24[0] * (ftbl0[int((65536.0f * fRec23[0]))] + ftbl0[int((65536.0f * fRec21[0]))]))) + (fRec20[0] * (ftbl0[int((65536.0f * fRec19[0]))] + ftbl0[int((65536.0f * fRec17[0]))]))) + (fRec16[0] * (ftbl0[int((65536.0f * fRec15[0]))] + ftbl0[int((65536.0f * fRec13[0]))]))) + (fRec12[0] * (ftbl0[int((65536.0f * fRec11[0]))] + ftbl0[int((65536.0f * fRec9[0]))]))) + (fRec8[0] * (ftbl0[int((65536.0f * fRec7[0]))] + ftbl0[int((65536.0f * fRec5[0]))]))) + (fRec4[0] * (ftbl0[int((65536.0f * fRec3[0]))] + ftbl0[int((65536.0f * fRec1[0]))])));
			// post processing
			fRec96[1] = fRec96[0];
			fRec95[1] = fRec95[0];
			fRec93[1] = fRec93[0];
			fRec94[1] = fRec94[0];
			fRec92[1] = fRec92[0];
			fRec91[1] = fRec91[0];
			fRec89[1] = fRec89[0];
			fRec90[1] = fRec90[0];
			fRec88[1] = fRec88[0];
			fRec87[1] = fRec87[0];
			fRec85[1] = fRec85[0];
			fRec86[1] = fRec86[0];
			fRec84[1] = fRec84[0];
			fRec83[1] = fRec83[0];
			fRec81[1] = fRec81[0];
			fRec82[1] = fRec82[0];
			fRec80[1] = fRec80[0];
			fRec79[1] = fRec79[0];
			fRec77[1] = fRec77[0];
			fRec78[1] = fRec78[0];
			fRec76[1] = fRec76[0];
			fRec75[1] = fRec75[0];
			fRec73[1] = fRec73[0];
			fRec74[1] = fRec74[0];
			fRec72[1] = fRec72[0];
			fRec71[1] = fRec71[0];
			fRec69[1] = fRec69[0];
			fRec70[1] = fRec70[0];
			fRec68[1] = fRec68[0];
			fRec67[1] = fRec67[0];
			fRec65[1] = fRec65[0];
			fRec66[1] = fRec66[0];
			fRec64[1] = fRec64[0];
			fRec63[1] = fRec63[0];
			fRec61[1] = fRec61[0];
			fRec62[1] = fRec62[0];
			fRec60[1] = fRec60[0];
			fRec59[1] = fRec59[0];
			fRec57[1] = fRec57[0];
			fRec58[1] = fRec58[0];
			fRec56[1] = fRec56[0];
			fRec55[1] = fRec55[0];
			fRec53[1] = fRec53[0];
			fRec54[1] = fRec54[0];
			fRec52[1] = fRec52[0];
			fRec51[1] = fRec51[0];
			fRec49[1] = fRec49[0];
			fRec50[1] = fRec50[0];
			fRec48[1] = fRec48[0];
			fRec47[1] = fRec47[0];
			fRec45[1] = fRec45[0];
			fRec46[1] = fRec46[0];
			fRec44[1] = fRec44[0];
			fRec43[1] = fRec43[0];
			fRec41[1] = fRec41[0];
			fRec42[1] = fRec42[0];
			fRec40[1] = fRec40[0];
			fRec39[1] = fRec39[0];
			fRec37[1] = fRec37[0];
			fRec38[1] = fRec38[0];
			fRec36[1] = fRec36[0];
			fRec35[1] = fRec35[0];
			fRec33[1] = fRec33[0];
			fRec34[1] = fRec34[0];
			fRec32[1] = fRec32[0];
			fRec31[1] = fRec31[0];
			fRec29[1] = fRec29[0];
			fRec30[1] = fRec30[0];
			fRec28[1] = fRec28[0];
			fRec27[1] = fRec27[0];
			fRec25[1] = fRec25[0];
			fRec26[1] = fRec26[0];
			fRec24[1] = fRec24[0];
			fRec23[1] = fRec23[0];
			fRec21[1] = fRec21[0];
			fRec22[1] = fRec22[0];
			fRec20[1] = fRec20[0];
			fRec19[1] = fRec19[0];
			fRec17[1] = fRec17[0];
			fRec18[1] = fRec18[0];
			fRec16[1] = fRec16[0];
			fRec15[1] = fRec15[0];
			fRec13[1] = fRec13[0];
			fRec14[1] = fRec14[0];
			fRec12[1] = fRec12[0];
			fRec11[1] = fRec11[0];
			fRec9[1] = fRec9[0];
			fRec10[1] = fRec10[0];
			fRec8[1] = fRec8[0];
			fRec7[1] = fRec7[0];
			fRec5[1] = fRec5[0];
			fRec6[1] = fRec6[0];
			fRec4[1] = fRec4[0];
			fRec3[1] = fRec3[0];
			fRec1[1] = fRec1[0];
			fRec2[1] = fRec2[0];
		}
	}
};


float 	mydsp::ftbl0[65536];
